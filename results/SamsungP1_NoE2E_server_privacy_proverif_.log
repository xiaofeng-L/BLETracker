/tmp/tmp.LfpcmcaH83/Samsung_location_NoE2E_server_privacy.spthy.gs
Starting the transformation...
Parsing the file...
Writing in the output file...
Translation complete !
Process 0 (that is, the initial process):
{1}new pre_app_ch1_1: channel;
{2}new pre_app_ch2_1: channel;
{3}new owner_account_1: bitstring;
{4}new encryption_key_1: bitstring;
{5}new seed_1: bitstring;
{6}new privacyIV_1: bitstring;
{7}!
(
    {8}new rand2_1: bitstring;
    {9}let privKey_1: bitstring = derive_key(encryption_key_1,privacy_const) in
    {10}let seedi_1: bitstring = (rand2_1,(seed_1,rand2_1)) in
    {11}let privId_1: bitstring = AES_enc(seedi_1,privKey_1,privacyIV_1) in
    {12}out(att, (privId_1,(Mode_NoE2E,adv)))
) | (
    {13}!
    (
        {14}event Secret(location_plain);
        {15}in(att, (privId: bitstring,(E2EMode_1: bitstring,=adv)));
        {16}if (E2EMode_1 = Mode_NoE2E) then
        {17}out(pre_app_ch2_1, (privId,(E2EMode_1,(location_plain,location_report_NoE2E))))
    ) | (
        {18}!
        (
            {19}if (Mode_NoE2E = Mode_NoE2E) then
            {20}in(pre_app_ch2_1, (privId_2: bitstring,(E2EMode_2: bitstring,(location_1: bitstring,=location_report_NoE2E))));
            {21}out(att, (privId_2,(E2EMode_2,(location_1,location_report_NoE2E_privacy))));
            {22}out(pre_app_ch1_1, (location_1,location_NoE2E))
        ) | (
            {23}!
            {24}if (Mode_NoE2E = Mode_NoE2E) then
            {25}in(pre_app_ch1_1, (location: bitstring,=location_NoE2E));
            {26}let loc_1: bitstring = location in
            0
        )
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new pre_app_ch1_1: channel;
{2}new pre_app_ch2_1: channel;
{3}new owner_account_1: bitstring;
{4}new encryption_key_1: bitstring;
{5}new seed_1: bitstring;
{6}new privacyIV_1: bitstring;
{7}!
(
    {8}new rand2_1: bitstring;
    {10}let seedi_1: bitstring = (rand2_1,(seed_1,rand2_1)) in
    {9}let privKey_1: bitstring = derive_key(encryption_key_1,privacy_const) in
    {11}let privId_1: bitstring = AES_enc(seedi_1,privKey_1,privacyIV_1) in
    {12}out(att, (privId_1,(Mode_NoE2E,adv)))
) | (
    {13}!
    (
        {14}event Secret(location_plain);
        {15}in(att, (privId: bitstring,(E2EMode_1: bitstring,=adv)));
        {16}if (E2EMode_1 = Mode_NoE2E) then
        {17}out(pre_app_ch2_1, (privId,(E2EMode_1,(location_plain,location_report_NoE2E))))
    ) | (
        {18}!
        (
            {19}if (Mode_NoE2E = Mode_NoE2E) then
            {20}in(pre_app_ch2_1, (privId_2: bitstring,(E2EMode_2: bitstring,(location_1: bitstring,=location_report_NoE2E))));
            {21}out(att, (privId_2,(E2EMode_2,(location_1,location_report_NoE2E_privacy))));
            {22}out(pre_app_ch1_1, (location_1,location_NoE2E))
        ) | (
            {23}!
            {24}if (Mode_NoE2E = Mode_NoE2E) then
            {25}in(pre_app_ch1_1, (location: bitstring,=location_NoE2E))
        )
    )
)

-- Query not attacker(location_plain) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(location_plain)
goal reachable: attacker(privId_3) && begin(@p_act(@occ15_1,(privId_3,(Mode_NoE2E,adv[])))) && begin(@p_act(@occ20_1,(privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E[]))))) -> attacker(location_plain)
Abbreviations:
@occ15_1 = @occ15[!2 = @sid,!1 = @sid_1]
@occ20_1 = @occ20[!3 = @sid_2,!2 = @sid_3,!1 = @sid_4]

Derivation:
Abbreviations:
@occ15_1 = @occ15[!2 = @sid,!1 = @sid_1]
@occ20_1 = @occ20[!3 = @sid_2,!2 = @sid_3,!1 = @sid_4]

1. The attacker initially knows adv[].
attacker(adv[]).

2. Using the function Mode_NoE2E the attacker may obtain Mode_NoE2E.
attacker(Mode_NoE2E).

3. By 2, the attacker may know Mode_NoE2E.
By 1, the attacker may know adv[].
Using the function 2-tuple the attacker may obtain (Mode_NoE2E,adv[]).
attacker((Mode_NoE2E,adv[])).

4. We assume as hypothesis that
attacker(privId_3).

5. By 4, the attacker may know privId_3.
By 3, the attacker may know (Mode_NoE2E,adv[]).
Using the function 2-tuple the attacker may obtain (privId_3,(Mode_NoE2E,adv[])).
attacker((privId_3,(Mode_NoE2E,adv[]))).

6. The event @p_act(@occ15_1,(privId_3,(Mode_NoE2E,adv[]))) records how variables are instantiated at {15}.
The message (privId_3,(Mode_NoE2E,adv[])) that the attacker may have by 5 may be received at input {15}.
So the message (privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E[]))) may be sent on channel pre_app_ch2_1[] at output {17}.
mess(pre_app_ch2_1[],(privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E[])))).

7. The event @p_act(@occ20_1,(privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E[])))) records how variables are instantiated at {20}.
The message (privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E[]))) that may be sent on channel pre_app_ch2_1[] by 6 may be received at input {20}.
So the message (privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[]))) may be sent to the attacker at output {21}.
attacker((privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[])))).

8. By 7, the attacker may know (privId_3,(Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[]))).
Using the function 2-proj-2-tuple the attacker may obtain (Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[])).
attacker((Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[]))).

9. By 8, the attacker may know (Mode_NoE2E,(location_plain,location_report_NoE2E_privacy[])).
Using the function 2-proj-2-tuple the attacker may obtain (location_plain,location_report_NoE2E_privacy[]).
attacker((location_plain,location_report_NoE2E_privacy[])).

10. By 9, the attacker may know (location_plain,location_report_NoE2E_privacy[]).
Using the function 1-proj-2-tuple the attacker may obtain location_plain.
attacker(location_plain).

11. By 10, attacker(location_plain).
The goal is reached, represented in the following fact:
attacker(location_plain).


A more detailed output of the traces is available with
  set traceDisplay = long.

new pre_app_ch1_1: channel creating pre_app_ch1 at {1}

new pre_app_ch2_1: channel creating pre_app_ch2 at {2}

new owner_account_1: bitstring creating owner_account at {3}

new encryption_key_1: bitstring creating encryption_key at {4}

new seed_1: bitstring creating seed at {5}

new privacyIV_1: bitstring creating privacyIV at {6}

event Secret(location_plain) at {14} in copy a, a_1

new rand2_1: bitstring creating rand2 at {8} in copy a

out(att, (~M,(~M_1,~M_2))) with ~M = AES_enc((rand2,(seed,rand2)),derive_key(encryption_key,privacy_const),privacyIV), ~M_1 = Mode_NoE2E, ~M_2 = adv at {12} in copy a

event Secret(location_plain) at {14} in copy a_2, a_3

new rand2_1: bitstring creating rand2_2 at {8} in copy a_2

out(att, (~M_3,(~M_4,~M_5))) with ~M_3 = AES_enc((rand2_2,(seed,rand2_2)),derive_key(encryption_key,privacy_const),privacyIV), ~M_4 = Mode_NoE2E, ~M_5 = adv at {12} in copy a_2

in(att, (a_4,(Mode_NoE2E,adv))) at {15} in copy a_2, a_3

out(pre_app_ch2, (a_4,(Mode_NoE2E,(location_plain,location_report_NoE2E)))) at {17} in copy a_2, a_3 received at {20} in copy a, a_1, a_5

out(att, (~M_6,(~M_7,(~M_8,~M_9)))) with ~M_6 = a_4, ~M_7 = Mode_NoE2E, ~M_8 = location_plain, ~M_9 = location_report_NoE2E_privacy at {21} in copy a, a_1, a_5

The attacker has the message ~M_8 = location_plain.
A trace has been found.
RESULT not attacker(location_plain) is false.

--------------------------------------------------------------
Verification summary:

Query not attacker(location_plain) is false.

--------------------------------------------------------------

