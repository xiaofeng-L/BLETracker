maude tool: 'maude'
 checking version: 3.1. OK.
 checking installation: OK.

theory Samsung_SmartTag begin

// Function signature and definition of the equational theory E

functions: AES_dec/3[destructor], AES_enc/3, IES_dec/2[destructor],
           IES_enc/2, Mode_E2E/0, Mode_NoE2E/0, SHA256/1, add/2, derive_key/2,
           diversify_const/0, fst/1[destructor], gen/0,
           get_sk/1[private,destructor], kdf/2, location/0[private,destructor],
           mul/2, pair/2, privacy_const/0, signature_const/0, snd/1[destructor],
           update_const/0
equations:
    AES_dec(AES_enc(mes, k, v), k, v) = mes,
    IES_dec(IES_enc(m, pk), get_sk(pk)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

heuristic: p













lemma confidentiality [output=[spthy]]:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #k. !KU( x ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #k. (!KU( x ) @ #k)"
*/
simplify
by solve( State_11111111111111121( ~P, ~SKS, ~encryption_key, ~iv,
                                   ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                                   ~sec_ch.1
          ) ▶₀ #i )





































rule (modulo E) Init[color=#ffffff, process="!"]:
   [ ] --[ Init( ) ]-> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process="!"]:
   [
   !Semistate_1( ), Fr( ~sec_ch.1 ), Fr( ~sec_ch.2 ),
   Fr( ~owner_account.1 ), Fr( ~encryption_key.1 ), Fr( ~seed.1 ),
   Fr( ~privacyIV.1 ), Fr( ~rand2.1 ), Fr( ~six_pin.1 ), Fr( ~iv.1 ),
   Fr( ~P.1 ), Fr( ~SKS.1 )
   ]
  -->
   [
   Let_1111111111111( kdf(kdf(~SKS.1, update_const), diversify_const), ~P.1,
                      ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                      ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, ~sec_ch.2
   )
   ]

  /*
  rule (modulo AC) p_1_[color=#ffffff, process="!"]:
     [
     !Semistate_1( ), Fr( ~sec_ch ), Fr( ~sec_ch.1 ), Fr( ~owner_account ),
     Fr( ~encryption_key ), Fr( ~seed ), Fr( ~privacyIV ), Fr( ~rand2 ),
     Fr( ~six_pin ), Fr( ~iv ), Fr( ~P ), Fr( ~SKS )
     ]
    -->
     [
     Let_1111111111111( kdf(kdf(~SKS, update_const), diversify_const), ~P,
                        ~SKS, ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch,
                        ~seed, ~six_pin, ~sec_ch.1
     )
     ]
  */

rule (modulo E) letuivikdfkdfSKSupdateconstdiversifyconst_1_111111111111[color=#ffffff,
                                                                         process="let <ui_0.1, vi_0.1>=kdf(kdf(~SKS.1, update_const), diversify_const)"]:
   [
   Let_1111111111111( <ui_0.1, vi_0.1>, ~P.1, ~SKS.1, ~encryption_key.1,
                      ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1,
                      ~six_pin.1, ~sec_ch.2
   )
   ]
  -->
   [
   State_1111111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                        ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                        ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]

  /*
  rule (modulo AC) letuivikdfkdfSKSupdateconstdiversifyconst_1_111111111111[color=#ffffff,
                                                                            process="let <ui_0.1, vi_0.1>=kdf(kdf(~SKS.1, update_const), diversify_const)"]:
     [
     Let_1111111111111( <ui_0, vi_0>, ~P, ~SKS, ~encryption_key, ~iv,
                        ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ~sec_ch.1
     )
     ]
    -->
     [
     State_1111111111111( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                          ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
  */

rule (modulo E) eventSecretlocation_0_11111111111111121[color=#794080,
                                                        process="event Secret( location );"]:
   [
   State_11111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                            ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                            ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Message( ~sec_ch.2, x.3 )
   ]
  --[ Secret( location ) ]->
   [
   Let_1111111111111112111( x.3, ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                            ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                            ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Ack( ~sec_ch.2, x.3 )
   ]

  /*
  rule (modulo AC) eventSecretlocation_0_11111111111111121[color=#794080,
                                                           process="event Secret( location );"]:
     [
     State_11111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                              ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     ),
     Message( ~sec_ch.1, x )
     ]
    --[ Secret( location ) ]->
     [
     Let_1111111111111112111( x, ~P, ~SKS, ~encryption_key, ~iv,
                              ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                              ~sec_ch.1
     ),
     Ack( ~sec_ch.1, x )
     ]
  */

rule (modulo E) insecchchannelprivIdEEModesignatureadv_1_111111111111111211[color=#794080,
                                                                            process="in(~sec_ch.2:channel,<privId.2, E2EMode.1, signature.2, 'adv'>);"]:
   [
   Let_1111111111111112111( <privId.2, E2EMode.1, signature.2, 'adv'>, ~P.1,
                            ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                            ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]
  -->
   [
   State_1111111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                              ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                              E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   )
   ]

  /*
  rule (modulo AC) insecchchannelprivIdEEModesignatureadv_1_111111111111111211[color=#794080,
                                                                               process="in(~sec_ch.2:channel,<privId.2, E2EMode.1, signature.2, 'adv'>);"]:
     [
     Let_1111111111111112111( <privId, E2EMode, signature, 'adv'>, ~P, ~SKS,
                              ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed,
                              ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
    -->
     [
     State_1111111111111112111( ~P, ~SKS, ~encryption_key, ~iv,
                                ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
  */

restriction Restr_ifEEModeModeEE_0_1111111111111112111_1:
  "∀ x #NOW.
    (Restr_ifEEModeModeEE_0_1111111111111112111_1( x ) @ #NOW) ⇒
    (x = Mode_E2E)"
  // safety formula

rule (modulo E) ifEEModeModeEE_0_1111111111111112111[color=#794080,
                                                     process="if E2EMode.1 = Mode_E2E"]:
   [
   State_1111111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                              ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                              E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   )
   ]
  --[ Restr_ifEEModeModeEE_0_1111111111111112111_1( E2EMode.1 ) ]->
   [
   Message( ~sec_ch.2, <privId.2, 'tracker_ID'> ),
   Semistate_111111111111111211111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                    ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                    E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) ifEEModeModeEE_0_1111111111111112111[color=#794080,
                                                        process="if E2EMode.1 = Mode_E2E"]:
     [
     State_1111111111111112111( ~P, ~SKS, ~encryption_key, ~iv,
                                ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
    --[ Restr_ifEEModeModeEE_0_1111111111111112111_1( E2EMode ) ]->
     [
     Message( ~sec_ch.1, <privId, 'tracker_ID'> ),
     Semistate_111111111111111211111( ~P, ~SKS, ~encryption_key, ~iv,
                                      ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                      ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
    // loop breaker: [0]
  */

rule (modulo E) outsecchchannelprivIdtrackerID_1_11111111111111121111[color=#794080,
                                                                      process="out(~sec_ch.2:channel,<privId.2, 'tracker_ID'>);"]:
   [
   Semistate_111111111111111211111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                    ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                    E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   ),
   Ack( ~sec_ch.2, <privId.2, 'tracker_ID'> ), Message( ~sec_ch.2, x.3 )
   ]
  -->
   [
   Let_1111111111111112111111( x.3, ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                               ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                               E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   ),
   Ack( ~sec_ch.2, x.3 )
   ]

  // loop breakers: [1,2]
  /*
  rule (modulo AC) outsecchchannelprivIdtrackerID_1_11111111111111121111[color=#794080,
                                                                         process="out(~sec_ch.2:channel,<privId.2, 'tracker_ID'>);"]:
     [
     Semistate_111111111111111211111( ~P, ~SKS, ~encryption_key, ~iv,
                                      ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                      ui_0, vi_0, ~sec_ch.1, privId, signature
     ),
     Ack( ~sec_ch.1, <privId, 'tracker_ID'> ), Message( ~sec_ch.1, x )
     ]
    -->
     [
     Let_1111111111111112111111( x, ~P, ~SKS, ~encryption_key, ~iv,
                                 ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                 ui_0, vi_0, ~sec_ch.1, privId, signature
     ),
     Ack( ~sec_ch.1, x )
     ]
    // loop breakers: [1,2]
  */

rule (modulo E) insecchchannelpubKeytrackerPubKey_1_111111111111111211111[color=#794080,
                                                                          process="in(~sec_ch.2:channel,<pubKey1.1, 'tracker_PubKey'>);"]:
   [
   Let_1111111111111112111111( <pubKey1.1, 'tracker_PubKey'>, ~P.1, ~SKS.1,
                               ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1,
                               ~sec_ch.1, ~seed.1, ~six_pin.1, E2EMode.1, ui_0.1, vi_0.1, ~sec_ch.2,
                               privId.2, signature.2
   )
   ]
  -->
   [
   State_1111111111111112111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                 ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                 E2EMode.1, pubKey1.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   )
   ]

  /*
  rule (modulo AC) insecchchannelpubKeytrackerPubKey_1_111111111111111211111[color=#794080,
                                                                             process="in(~sec_ch.2:channel,<pubKey1.1, 'tracker_PubKey'>);"]:
     [
     Let_1111111111111112111111( <pubKey1, 'tracker_PubKey'>, ~P, ~SKS,
                                 ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed,
                                 ~six_pin, E2EMode, ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
    -->
     [
     State_1111111111111112111111( ~P, ~SKS, ~encryption_key, ~iv,
                                   ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                   pubKey1, ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
  */

rule (modulo E) outsecchchannelprivIdEEModesignatureIESenclocationpubKeylocationreportEE_0_1111111111111112111111[color=#794080,
                                                                                                                  process="out(~sec_ch.2:channel,<privId.2, E2EMode.1, signature.2, IES_enc(location, pubKey1.1), 
 'location_report_E2E'>);"]:
   [
   State_1111111111111112111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                 ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                 E2EMode.1, pubKey1.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2, signature.2
   )
   ]
  -->
   [
   Message( ~sec_ch.2,
            <privId.2, E2EMode.1, signature.2, IES_enc(location, pubKey1.1), 
             'location_report_E2E'>
   ),
   Semistate_11111111111111121111111( ~P.1, ~SKS.1, ~encryption_key.1,
                                      ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1,
                                      ~six_pin.1, E2EMode.1, pubKey1.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.2,
                                      signature.2
   )
   ]

  /*
  rule (modulo AC) outsecchchannelprivIdEEModesignatureIESenclocationpubKeylocationreportEE_0_1111111111111112111111[color=#794080,
                                                                                                                     process="out(~sec_ch.2:channel,<privId.2, E2EMode.1, signature.2, IES_enc(location, pubKey1.1), 
 'location_report_E2E'>);"]:
     [
     State_1111111111111112111111( ~P, ~SKS, ~encryption_key, ~iv,
                                   ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                   pubKey1, ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
    -->
     [
     Message( ~sec_ch.1,
              <privId, E2EMode, signature, IES_enc(location, pubKey1), 
               'location_report_E2E'>
     ),
     Semistate_11111111111111121111111( ~P, ~SKS, ~encryption_key, ~iv,
                                        ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, E2EMode,
                                        pubKey1, ui_0, vi_0, ~sec_ch.1, privId, signature
     )
     ]
  */

restriction Restr_ifModeEEModeEE_0_1111111111111121_1:
  "∀ #NOW.
    (Restr_ifModeEEModeEE_0_1111111111111121_1( ) @ #NOW) ⇒
    (Mode_E2E = Mode_E2E)"
  // safety formula

rule (modulo E) ifModeEEModeEE_0_1111111111111121[color=#658040,
                                                  process="if Mode_E2E = Mode_E2E"]:
   [
   State_1111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                           ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                           ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Message( ~sec_ch.2, x.3 )
   ]
  --[ Restr_ifModeEEModeEE_0_1111111111111121_1( ) ]->
   [
   Let_111111111111112111( x.3, ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                           ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                           ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Ack( ~sec_ch.2, x.3 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ifModeEEModeEE_0_1111111111111121[color=#658040,
                                                     process="if Mode_E2E = Mode_E2E"]:
     [
     State_1111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                             ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     ),
     Message( ~sec_ch.1, x )
     ]
    --[ Restr_ifModeEEModeEE_0_1111111111111121_1( ) ]->
     [
     Let_111111111111112111( x, ~P, ~SKS, ~encryption_key, ~iv,
                             ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                             ~sec_ch.1
     ),
     Ack( ~sec_ch.1, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) insecchchannelprivIdtrackerID_1_11111111111111211[color=#658040,
                                                                  process="in(~sec_ch.2:channel,<privId.3, 'tracker_ID'>);"]:
   [
   Let_111111111111112111( <privId.3, 'tracker_ID'>, ~P.1, ~SKS.1,
                           ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1,
                           ~sec_ch.1, ~seed.1, ~six_pin.1, ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]
  -->
   [
   State_111111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                             ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                             ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]

  /*
  rule (modulo AC) insecchchannelprivIdtrackerID_1_11111111111111211[color=#658040,
                                                                     process="in(~sec_ch.2:channel,<privId.3, 'tracker_ID'>);"]:
     [
     Let_111111111111112111( <privId, 'tracker_ID'>, ~P, ~SKS,
                             ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed,
                             ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
    -->
     [
     State_111111111111112111( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                               ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1,
                               privId
     )
     ]
  */

rule (modulo E) outprivIdtrackerID_0_111111111111112111[color=#658040,
                                                        process="out(<privId.3, 'tracker_ID'>);"]:
   [
   State_111111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                             ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                             ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]
  -->
   [
   Let_11111111111111211111( AES_dec(privId.3,
                                     derive_key(~encryption_key.1, privacy_const), ~privacyIV.1),
                             ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                             ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, ui_0.1, vi_0.1, ~sec_ch.2,
                             privId.3
   ),
   Out( <privId.3, 'tracker_ID'> )
   ]

  /*
  rule (modulo AC) outprivIdtrackerID_0_111111111111112111[color=#658040,
                                                           process="out(<privId.3, 'tracker_ID'>);"]:
     [
     State_111111111111112111( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                               ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1,
                               privId
     )
     ]
    -->
     [
     Let_11111111111111211111( z, ~P, ~SKS, ~encryption_key, ~iv,
                               ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                               ~sec_ch.1, privId
     ),
     Out( <privId, 'tracker_ID'> )
     ]
    variants (modulo AC)
    1. ~encryption_key
             = ~encryption_key.22
       ~privacyIV
             = ~privacyIV.25
       privId
             = privId.33
       z     = AES_dec(privId.33, derive_key(~encryption_key.22, privacy_const),
                       ~privacyIV.25)
    
    2. ~encryption_key
             = ~encryption_key.31
       ~privacyIV
             = ~privacyIV.34
       privId
             = AES_enc(z.43, derive_key(~encryption_key.31, privacy_const),
                       ~privacyIV.34)
       z     = z.43
  */

rule (modulo E) letrseedadvrAESdecprivIdderivekeyencryptionkeyprivacyconstprivacyIV_1_1111111111111121111[color=#ffffff,
                                                                                                          process="let <r2.1, seed_adv.1, r2.1>=AES_dec(privId.3, derive_key(~encryption_key.1, privacy_const),
        ~privacyIV.1)"]:
   [
   Let_11111111111111211111( <r2.1, seed_adv.1, r2.1>, ~P.1, ~SKS.1,
                             ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1,
                             ~sec_ch.1, ~seed.1, ~six_pin.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]
  -->
   [
   State_11111111111111211111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                               ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                               r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]

  /*
  rule (modulo AC) letrseedadvrAESdecprivIdderivekeyencryptionkeyprivacyconstprivacyIV_1_1111111111111121111[color=#ffffff,
                                                                                                             process="let <r2.1, seed_adv.1, r2.1>=AES_dec(privId.3, derive_key(~encryption_key.1, privacy_const),
        ~privacyIV.1)"]:
     [
     Let_11111111111111211111( <r2, seed_adv, r2>, ~P, ~SKS, ~encryption_key,
                               ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0,
                               vi_0, ~sec_ch.1, privId
     )
     ]
    -->
     [
     State_11111111111111211111( ~P, ~SKS, ~encryption_key, ~iv,
                                 ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                 seed_adv, ui_0, vi_0, ~sec_ch.1, privId
     )
     ]
  */

restriction Restr_ifseedadvseed_0_11111111111111211111_1:
  "∀ x #NOW x.1.
    (Restr_ifseedadvseed_0_11111111111111211111_1( x, x.1 ) @ #NOW) ⇒
    (x = x.1)"
  // safety formula

rule (modulo E) ifseedadvseed_0_11111111111111211111[color=#658040,
                                                     process="if seed_adv.1 = ~seed.1"]:
   [
   State_11111111111111211111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                               ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                               r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]
  --[ Restr_ifseedadvseed_0_11111111111111211111_1( seed_adv.1, ~seed.1 )
  ]->
   [
   Message( ~sec_ch.2,
            <add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen)), 'tracker_PubKey'>
   ),
   Semistate_1111111111111121111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                     ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                     r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   )
   ]

  /*
  rule (modulo AC) ifseedadvseed_0_11111111111111211111[color=#658040,
                                                        process="if seed_adv.1 = ~seed.1"]:
     [
     State_11111111111111211111( ~P, ~SKS, ~encryption_key, ~iv,
                                 ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                 seed_adv, ui_0, vi_0, ~sec_ch.1, privId
     )
     ]
    --[ Restr_ifseedadvseed_0_11111111111111211111_1( seed_adv, ~seed ) ]->
     [
     Message( ~sec_ch.1,
              <add(mul(ui_0, ~P), mul(vi_0, gen)), 'tracker_PubKey'>
     ),
     Semistate_1111111111111121111111( ~P, ~SKS, ~encryption_key, ~iv,
                                       ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                       seed_adv, ui_0, vi_0, ~sec_ch.1, privId
     )
     ]
  */

rule (modulo E) outsecchchanneladdmuluiPmulvigentrackerPubKey_1_111111111111112111111[color=#658040,
                                                                                      process="out(~sec_ch.2:channel,<add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen)), 'tracker_PubKey'>);"]:
   [
   Semistate_1111111111111121111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                     ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                     r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   ),
   Ack( ~sec_ch.2,
        <add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen)), 'tracker_PubKey'>
   ),
   Message( ~sec_ch.2, x.4 )
   ]
  -->
   [
   Let_11111111111111211111111( x.4, ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, privId.3
   ),
   Ack( ~sec_ch.2, x.4 )
   ]

  // loop breakers: [1,2]
  /*
  rule (modulo AC) outsecchchanneladdmuluiPmulvigentrackerPubKey_1_111111111111112111111[color=#658040,
                                                                                         process="out(~sec_ch.2:channel,<add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen)), 'tracker_PubKey'>);"]:
     [
     Semistate_1111111111111121111111( ~P, ~SKS, ~encryption_key, ~iv,
                                       ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                       seed_adv, ui_0, vi_0, ~sec_ch.1, privId
     ),
     Ack( ~sec_ch.1, <add(mul(ui_0, ~P), mul(vi_0, gen)), 'tracker_PubKey'> ),
     Message( ~sec_ch.1, x )
     ]
    -->
     [
     Let_11111111111111211111111( x, ~P, ~SKS, ~encryption_key, ~iv,
                                  ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                  seed_adv, ui_0, vi_0, ~sec_ch.1, privId
     ),
     Ack( ~sec_ch.1, x )
     ]
    // loop breakers: [1,2]
  */

rule (modulo E) insecchchannelprivIdEEModesignaturesealedboxloclocationreportEE_1_1111111111111121111111[color=#658040,
                                                                                                         process="in(~sec_ch.2:channel,<privId.4, E2EMode.2, signature.3, sealedbox_loc.2, 
 'location_report_E2E'>);"]:
   [
   Let_11111111111111211111111( <privId.4, E2EMode.2, signature.3, 
                                 sealedbox_loc.2, 'location_report_E2E'>,
                                ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                                ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, r2.1, seed_adv.1, ui_0.1,
                                vi_0.1, ~sec_ch.2, privId.3
   )
   ]
  -->
   [
   State_11111111111111211111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                  ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                  r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2,
                                  privId.3, signature.3, privId.4
   )
   ]

  /*
  rule (modulo AC) insecchchannelprivIdEEModesignaturesealedboxloclocationreportEE_1_1111111111111121111111[color=#658040,
                                                                                                            process="in(~sec_ch.2:channel,<privId.4, E2EMode.2, signature.3, sealedbox_loc.2, 
 'location_report_E2E'>);"]:
     [
     Let_11111111111111211111111( <privId, E2EMode, signature, sealedbox_loc, 
                                   'location_report_E2E'>,
                                  ~P, ~SKS, ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2,
                                  ~sec_ch, ~seed, ~six_pin, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, privId.1
     )
     ]
    -->
     [
     State_11111111111111211111111( ~P, ~SKS, ~encryption_key, ~iv,
                                    ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                    seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode, sealedbox_loc, privId.1,
                                    signature, privId
     )
     ]
  */

rule (modulo E) outprivIdEEModesignaturesealedboxloclocationreportEE_0_11111111111111211111111[color=#658040,
                                                                                               process="out(<privId.4, E2EMode.2, signature.3, sealedbox_loc.2, 
 'location_report_E2E'>);"]:
   [
   State_11111111111111211111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                  ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                  r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2,
                                  privId.3, signature.3, privId.4
   )
   ]
  -->
   [
   State_111111111111112111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                   ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                   r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2,
                                   privId.3, signature.3, privId.4
   ),
   Out( <privId.4, E2EMode.2, signature.3, sealedbox_loc.2, 
         'location_report_E2E'>
   )
   ]

  /*
  rule (modulo AC) outprivIdEEModesignaturesealedboxloclocationreportEE_0_11111111111111211111111[color=#658040,
                                                                                                  process="out(<privId.4, E2EMode.2, signature.3, sealedbox_loc.2, 
 'location_report_E2E'>);"]:
     [
     State_11111111111111211111111( ~P, ~SKS, ~encryption_key, ~iv,
                                    ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                    seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode, sealedbox_loc, privId,
                                    signature, privId.1
     )
     ]
    -->
     [
     State_111111111111112111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                     ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                     seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode, sealedbox_loc, privId,
                                     signature, privId.1
     ),
     Out( <privId.1, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>
     )
     ]
  */

restriction Restr_ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111_1:
  "∀ x #NOW x.1.
    (Restr_ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111_1( x,
                                                                                                                    x.1
     ) @ #NOW) ⇒
    (x = x.1)"
  // safety formula

rule (modulo E) ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111[color=#658040,
                                                                                                                      process="if signature.3 =
AES_enc(<privId.4, E2EMode.2>,
        derive_key(~encryption_key.1, signature_const), ~privacyIV.1)"]:
   [
   State_111111111111112111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                   ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                   r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2,
                                   privId.3, signature.3, privId.4
   ),
   Message( ~sec_ch.2, x.5 )
   ]
  --[
  Restr_ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111_1( signature.3,
                                                                                                                 AES_enc(<
                                                                                                                          privId.4, 
                                                                                                                          E2EMode.2
                                                                                                                         >,
                                                                                                                         derive_key(~encryption_key.1,
                                                                                                                                    signature_const),
                                                                                                                         ~privacyIV.1)
  )
  ]->
   [
   Let_11111111111111211111111111( x.5, ~P.1, ~SKS.1, ~encryption_key.1,
                                   ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1,
                                   ~six_pin.1, r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2,
                                   sealedbox_loc.2, privId.3, signature.3, privId.4
   ),
   Ack( ~sec_ch.2, x.5 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111[color=#658040,
                                                                                                                         process="if signature.3 =
AES_enc(<privId.4, E2EMode.2>,
        derive_key(~encryption_key.1, signature_const), ~privacyIV.1)"]:
     [
     State_111111111111112111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                     ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                     seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode, sealedbox_loc, privId,
                                     signature, privId.1
     ),
     Message( ~sec_ch.1, x )
     ]
    --[
    Restr_ifsignatureAESencprivIdEEModederivekeyencryptionkeysignatureconstprivacyIV_0_111111111111112111111111_1( signature,
                                                                                                                   AES_enc(<
                                                                                                                            privId.1, 
                                                                                                                            E2EMode
                                                                                                                           >,
                                                                                                                           derive_key(~encryption_key,
                                                                                                                                      signature_const),
                                                                                                                           ~privacyIV)
    )
    ]->
     [
     Let_11111111111111211111111111( x, ~P, ~SKS, ~encryption_key, ~iv,
                                     ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, r2,
                                     seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode, sealedbox_loc, privId,
                                     signature, privId.1
     ),
     Ack( ~sec_ch.1, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) insecchchannelowneraccountquerylocationEE_1_1111111111111121111111111[color=#658040,
                                                                                      process="in(~sec_ch.2:channel,<owner_account2.1, 'query_location_E2E'>);"]:
   [
   Let_11111111111111211111111111( <owner_account2.1, 'query_location_E2E'>,
                                   ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                                   ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, r2.1, seed_adv.1, ui_0.1,
                                   vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2, privId.3, signature.3,
                                   privId.4
   )
   ]
  -->
   [
   State_11111111111111211111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                     ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                     owner_account2.1, r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2,
                                     sealedbox_loc.2, privId.3, signature.3, privId.4
   )
   ]

  /*
  rule (modulo AC) insecchchannelowneraccountquerylocationEE_1_1111111111111121111111111[color=#658040,
                                                                                         process="in(~sec_ch.2:channel,<owner_account2.1, 'query_location_E2E'>);"]:
     [
     Let_11111111111111211111111111( <owner_account2, 'query_location_E2E'>,
                                     ~P, ~SKS, ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2,
                                     ~sec_ch, ~seed, ~six_pin, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                     sealedbox_loc, privId, signature, privId.1
     )
     ]
    -->
     [
     State_11111111111111211111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                       ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin,
                                       owner_account2, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                       sealedbox_loc, privId, signature, privId.1
     )
     ]
  */

rule (modulo E) outowneraccountquerylocationEE_0_11111111111111211111111111[color=#658040,
                                                                            process="out(<owner_account2.1, 'query_location_E2E'>);"]:
   [
   State_11111111111111211111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                     ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                     owner_account2.1, r2.1, seed_adv.1, ui_0.1, vi_0.1, ~sec_ch.2, E2EMode.2,
                                     sealedbox_loc.2, privId.3, signature.3, privId.4
   )
   ]
  -->
   [
   State_111111111111112111111111111( ~P.1, ~SKS.1, ~encryption_key.1,
                                      ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1,
                                      ~six_pin.1, owner_account2.1, r2.1, seed_adv.1, ui_0.1, vi_0.1,
                                      ~sec_ch.2, E2EMode.2, sealedbox_loc.2, privId.3, signature.3, privId.4
   ),
   Out( <owner_account2.1, 'query_location_E2E'> )
   ]

  /*
  rule (modulo AC) outowneraccountquerylocationEE_0_11111111111111211111111111[color=#658040,
                                                                               process="out(<owner_account2.1, 'query_location_E2E'>);"]:
     [
     State_11111111111111211111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                       ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin,
                                       owner_account2, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                       sealedbox_loc, privId, signature, privId.1
     )
     ]
    -->
     [
     State_111111111111112111111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                        ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin,
                                        owner_account2, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                        sealedbox_loc, privId, signature, privId.1
     ),
     Out( <owner_account2, 'query_location_E2E'> )
     ]
  */

restriction Restr_ifowneraccountowneraccount_0_111111111111112111111111111_1:
  "∀ x #NOW x.1.
    (Restr_ifowneraccountowneraccount_0_111111111111112111111111111_1( x, x.1
     ) @ #NOW) ⇒
    (x = x.1)"
  // safety formula

rule (modulo E) ifowneraccountowneraccount_0_111111111111112111111111111[color=#658040,
                                                                         process="if ~owner_account.1 = owner_account2.1"]:
   [
   State_111111111111112111111111111( ~P.1, ~SKS.1, ~encryption_key.1,
                                      ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1,
                                      ~six_pin.1, owner_account2.1, r2.1, seed_adv.1, ui_0.1, vi_0.1,
                                      ~sec_ch.2, E2EMode.2, sealedbox_loc.2, privId.3, signature.3, privId.4
   )
   ]
  --[
  Restr_ifowneraccountowneraccount_0_111111111111112111111111111_1( ~owner_account.1,
                                                                    owner_account2.1
  )
  ]->
   [
   Message( ~sec_ch.2,
            <sealedbox_loc.2, 
             <
              AES_enc(get_sk(add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen))),
                      SHA256(~six_pin.1), ~iv.1), 
              add(mul(ui_0.1, ~P.1), mul(vi_0.1, gen)), ~iv.1>, 
             'location_E2E_and_key_item'>
   ),
   Semistate_11111111111111211111111111111( ~P.1, ~SKS.1, ~encryption_key.1,
                                            ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1,
                                            ~seed.1, ~six_pin.1, owner_account2.1, r2.1, seed_adv.1, ui_0.1,
                                            vi_0.1, ~sec_ch.2, E2EMode.2, sealedbox_loc.2, privId.3,
                                            signature.3, privId.4
   )
   ]

  /*
  rule (modulo AC) ifowneraccountowneraccount_0_111111111111112111111111111[color=#658040,
                                                                            process="if ~owner_account.1 = owner_account2.1"]:
     [
     State_111111111111112111111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                        ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin,
                                        owner_account2, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                        sealedbox_loc, privId, signature, privId.1
     )
     ]
    --[
    Restr_ifowneraccountowneraccount_0_111111111111112111111111111_1( ~owner_account,
                                                                      owner_account2
    )
    ]->
     [
     Message( ~sec_ch.1,
              <sealedbox_loc, 
               <
                AES_enc(get_sk(add(mul(ui_0, ~P), mul(vi_0, gen))), SHA256(~six_pin),
                        ~iv), 
                add(mul(ui_0, ~P), mul(vi_0, gen)), ~iv>, 
               'location_E2E_and_key_item'>
     ),
     Semistate_11111111111111211111111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                              ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin,
                                              owner_account2, r2, seed_adv, ui_0, vi_0, ~sec_ch.1, E2EMode,
                                              sealedbox_loc, privId, signature, privId.1
     )
     ]
  */

rule (modulo E) p_0_1111111111111[color=#ffffff, process="|"]:
   [
   State_1111111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                        ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                        ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]
  -->
   [
   State_111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                          ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                          ui_0.1, vi_0.1, ~sec_ch.2
   ),
   State_1111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                           ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                           ui_0.1, vi_0.1, ~sec_ch.2
   ),
   State_11111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                            ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                            ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Message( ~sec_ch.2,
            <
             AES_enc(<~rand2.1, ~seed.1, ~rand2.1>,
                     derive_key(~encryption_key.1, privacy_const), ~privacyIV.1), 
             Mode_E2E, 
             AES_enc(<
                      AES_enc(<~rand2.1, ~seed.1, ~rand2.1>,
                              derive_key(~encryption_key.1, privacy_const), ~privacyIV.1), 
                      Mode_E2E>,
                     derive_key(~encryption_key.1, signature_const), ~privacyIV.1), 
             'adv'>
   ),
   Semistate_111111111111111111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                 ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                 ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]

  /*
  rule (modulo AC) p_0_1111111111111[color=#ffffff, process="|"]:
     [
     State_1111111111111( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                          ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
    -->
     [
     State_111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                            ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     ),
     State_1111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                             ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     ),
     State_11111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                              ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     ),
     Message( ~sec_ch.1,
              <
               AES_enc(<~rand2, ~seed, ~rand2>,
                       derive_key(~encryption_key, privacy_const), ~privacyIV), 
               Mode_E2E, 
               AES_enc(<
                        AES_enc(<~rand2, ~seed, ~rand2>,
                                derive_key(~encryption_key, privacy_const), ~privacyIV), 
                        Mode_E2E>,
                       derive_key(~encryption_key, signature_const), ~privacyIV), 
               'adv'>
     ),
     Semistate_111111111111111111( ~P, ~SKS, ~encryption_key, ~iv,
                                   ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                                   ~sec_ch.1
     )
     ]
  */

restriction Restr_ifModeEEModeEE_0_111111111111121_1:
  "∀ #NOW.
    (Restr_ifModeEEModeEE_0_111111111111121_1( ) @ #NOW) ⇒
    (Mode_E2E = Mode_E2E)"
  // safety formula

rule (modulo E) ifModeEEModeEE_0_111111111111121[color=#804640,
                                                 process="if Mode_E2E = Mode_E2E"]:
   [
   State_111111111111121( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                          ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                          ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]
  --[ Restr_ifModeEEModeEE_0_111111111111121_1( ) ]->
   [
   Message( ~sec_ch.2, <~owner_account.1, 'query_location_E2E'> ),
   Semistate_11111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]

  /*
  rule (modulo AC) ifModeEEModeEE_0_111111111111121[color=#804640,
                                                    process="if Mode_E2E = Mode_E2E"]:
     [
     State_111111111111121( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                            ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
    --[ Restr_ifModeEEModeEE_0_111111111111121_1( ) ]->
     [
     Message( ~sec_ch.1, <~owner_account, 'query_location_E2E'> ),
     Semistate_11111111111112111( ~P, ~SKS, ~encryption_key, ~iv,
                                  ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                                  ~sec_ch.1
     )
     ]
  */

rule (modulo E) outsecchchannelowneraccountquerylocationEE_1_1111111111111211[color=#804640,
                                                                              process="out(~sec_ch.2:channel,<~owner_account.1, 'query_location_E2E'>);"]:
   [
   Semistate_11111111111112111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                                ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                                ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Ack( ~sec_ch.2, <~owner_account.1, 'query_location_E2E'> ),
   Message( ~sec_ch.2, x.3 )
   ]
  -->
   [
   Let_111111111111121111( x.3, ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                           ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                           ui_0.1, vi_0.1, ~sec_ch.2
   ),
   Ack( ~sec_ch.2, x.3 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outsecchchannelowneraccountquerylocationEE_1_1111111111111211[color=#804640,
                                                                                 process="out(~sec_ch.2:channel,<~owner_account.1, 'query_location_E2E'>);"]:
     [
     Semistate_11111111111112111( ~P, ~SKS, ~encryption_key, ~iv,
                                  ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                                  ~sec_ch.1
     ),
     Ack( ~sec_ch.1, <~owner_account, 'query_location_E2E'> ),
     Message( ~sec_ch.1, x )
     ]
    -->
     [
     Let_111111111111121111( x, ~P, ~SKS, ~encryption_key, ~iv,
                             ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, ui_0, vi_0,
                             ~sec_ch.1
     ),
     Ack( ~sec_ch.1, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) insecchchannelsealedboxlocencpripubKeyivlocationEEandkeyitem_1_11111111111112111[color=#804640,
                                                                                                 process="in(~sec_ch.2:channel,<sealedbox_loc.3, <enc_pri1.1, pubKey1.2, ~iv.2>, 
 'location_E2E_and_key_item'>);"]:
   [
   Let_111111111111121111( <sealedbox_loc.3, 
                            <enc_pri1.1, pubKey1.2, ~iv.2>, 'location_E2E_and_key_item'>,
                           ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                           ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, ui_0.1, vi_0.1, ~sec_ch.2
   )
   ]
  -->
   [
   State_111111111111121111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                             ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                             enc_pri1.1, ui_0.1, vi_0.1, ~iv.2, ~sec_ch.2, pubKey1.2, sealedbox_loc.3
   )
   ]

  /*
  rule (modulo AC) insecchchannelsealedboxlocencpripubKeyivlocationEEandkeyitem_1_11111111111112111[color=#804640,
                                                                                                    process="in(~sec_ch.2:channel,<sealedbox_loc.3, <enc_pri1.1, pubKey1.2, ~iv.2>, 
 'location_E2E_and_key_item'>);"]:
     [
     Let_111111111111121111( <sealedbox_loc, <enc_pri1, pubKey1, ~iv>, 
                              'location_E2E_and_key_item'>,
                             ~P, ~SKS, ~encryption_key, ~iv.1, ~owner_account, ~privacyIV, ~rand2,
                             ~sec_ch, ~seed, ~six_pin, ui_0, vi_0, ~sec_ch.1
     )
     ]
    -->
     [
     State_111111111111121111( ~P, ~SKS, ~encryption_key, ~iv.1,
                               ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, enc_pri1,
                               ui_0, vi_0, ~iv, ~sec_ch.1, pubKey1, sealedbox_loc
     )
     ]
  */

rule (modulo E) letlocIESdecsealedboxlocgetskpubKey_0_111111111111121111[color=#ffffff,
                                                                         process="let loc.1=IES_dec(sealedbox_loc.3, get_sk(pubKey1.2))"]:
   [
   State_111111111111121111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                             ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                             enc_pri1.1, ui_0.1, vi_0.1, ~iv.2, ~sec_ch.2, pubKey1.2, sealedbox_loc.3
   )
   ]
  -->
   [
   Let_1111111111111211111( <sealedbox_loc.3, get_sk(pubKey1.2)>, ~P.1,
                            ~SKS.1, ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1,
                            ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1, enc_pri1.1, ui_0.1, vi_0.1,
                            ~iv.2, ~sec_ch.2, pubKey1.2, sealedbox_loc.3
   )
   ]

  /*
  rule (modulo AC) letlocIESdecsealedboxlocgetskpubKey_0_111111111111121111[color=#ffffff,
                                                                            process="let loc.1=IES_dec(sealedbox_loc.3, get_sk(pubKey1.2))"]:
     [
     State_111111111111121111( ~P, ~SKS, ~encryption_key, ~iv, ~owner_account,
                               ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, enc_pri1, ui_0, vi_0,
                               ~iv.1, ~sec_ch.1, pubKey1, sealedbox_loc
     )
     ]
    -->
     [
     Let_1111111111111211111( <sealedbox_loc, get_sk(pubKey1)>, ~P, ~SKS,
                              ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed,
                              ~six_pin, enc_pri1, ui_0, vi_0, ~iv.1, ~sec_ch.1, pubKey1, sealedbox_loc
     )
     ]
  */

rule (modulo E) letlocIESdecsealedboxlocgetskpubKey_1_111111111111121111[color=#ffffff,
                                                                         process="let loc.1=IES_dec(sealedbox_loc.3, get_sk(pubKey1.2))"]:
   [
   Let_1111111111111211111( <IES_enc(loc.1, pk), get_sk(pk)>, ~P.1, ~SKS.1,
                            ~encryption_key.1, ~iv.1, ~owner_account.1, ~privacyIV.1, ~rand2.1,
                            ~sec_ch.1, ~seed.1, ~six_pin.1, enc_pri1.1, ui_0.1, vi_0.1, ~iv.2,
                            ~sec_ch.2, pubKey1.2, sealedbox_loc.3
   )
   ]
  -->
   [
   State_1111111111111211111( ~P.1, ~SKS.1, ~encryption_key.1, ~iv.1,
                              ~owner_account.1, ~privacyIV.1, ~rand2.1, ~sec_ch.1, ~seed.1, ~six_pin.1,
                              enc_pri1.1, loc.1, ui_0.1, vi_0.1, ~iv.2, ~sec_ch.2, pubKey1.2,
                              sealedbox_loc.3
   )
   ]

  /*
  rule (modulo AC) letlocIESdecsealedboxlocgetskpubKey_1_111111111111121111[color=#ffffff,
                                                                            process="let loc.1=IES_dec(sealedbox_loc.3, get_sk(pubKey1.2))"]:
     [
     Let_1111111111111211111( <IES_enc(loc, pk), get_sk(pk)>, ~P, ~SKS,
                              ~encryption_key, ~iv, ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed,
                              ~six_pin, enc_pri1, ui_0, vi_0, ~iv.1, ~sec_ch.1, pubKey1, sealedbox_loc
     )
     ]
    -->
     [
     State_1111111111111211111( ~P, ~SKS, ~encryption_key, ~iv,
                                ~owner_account, ~privacyIV, ~rand2, ~sec_ch, ~seed, ~six_pin, enc_pri1,
                                loc, ui_0, vi_0, ~iv.1, ~sec_ch.1, pubKey1, sealedbox_loc
     )
     ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: ./_fixed_Models/P1_fixed_MI1_2_Samsung_location_fixed_server_privacy.spthy

  confidentiality (all-traces): verified (2 steps)

==============================================================================
