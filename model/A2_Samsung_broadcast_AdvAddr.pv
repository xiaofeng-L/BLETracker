free ch: channel.

(* type defination *)
type key.

(* Concatenation helper functions *)
fun concat(bitstring, bitstring): bitstring.
fun first_part(bitstring): bitstring.
fun last_part(bitstring): bitstring.
equation forall b1: bitstring, b2: bitstring; first_part(concat(b1, b2)) = b1.
equation forall b1: bitstring, b2: bitstring; last_part(concat(b1, b2)) = b2.

(* Security function e is implemented by AES-128-bit *)
fun AES_enc(key, bitstring): bitstring.
fun AES_dec(key, bitstring): bitstring.
equation forall k: key, mes: bitstring; AES_dec(k, AES_enc(k, mes)) = mes.

(* The random address hash function ah: ah(k,r) = e(k, padding(r)) *)
fun padding(bitstring): bitstring.
letfun ah(k: key, r: bitstring) = AES_enc(k, padding(r)).

let AdvAddr_rotation(IRK: key) = (
  new prand: bitstring;
  let localHash = ah(IRK, prand) in
  (* Observational equivalence: real-or-random secrecy *)
  new random: bitstring;
  out(ch, choice[localHash, random])
).

process
new IRK: key;
!AdvAddr_rotation(IRK)