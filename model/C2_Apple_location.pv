(* For privacy, cloud is equipment to open channel for data communication between finder device and owner device. *)
(* For security, cloud channel is private. *)
free cloud_ch: channel.
free pre_app_ch1: channel [private].
free pre_app_ch2: channel [private].

(* type defination *)
type public_key.
type random_num.
type private_key.
type dhkey.
type key.
type iv.
type nonce.
type sealedbox.

type status.
free lost: status.
free found: status.

(* owner and owner device *)
table pid(public_key).
(* cloud *)
table ploc(bitstring, public_key, sealedbox).
(* owner *)
table pkeyitem(private_key).
(* owner and finder *)
table padv(public_key).
(* status *)
table plost(status).
table pfound(status).

(* sensitive data, length < 16 bytes *)
free location: bitstring [private].


(* Type conversion helper functions *)
fun bitstring2key(bitstring): key [typeConverter].
fun bitstring2iv(bitstring): iv[typeConverter].
fun bitstring2pubkey(bitstring): public_key [typeConverter].
fun pubkey2bitstring(public_key): bitstring [typeConverter].
fun dhkey2bitstring(dhkey): bitstring [typeConverter].

(* Concatenation helper functions *)
fun first16bytes(bitstring): bitstring.
fun last16bytes(bitstring): bitstring.

(* AES-GCM with sealedbox. sealedbox: concat(ciphertext, tag) *)
fun AES_GCM_enc(bitstring, key, iv): sealedbox.
fun AES_GCM_dec(sealedbox, key, iv): bitstring.
equation forall k: key, v: iv, mes: bitstring; AES_GCM_dec(AES_GCM_enc(mes, k, v), k, v) = mes.

(* Hash function *)
fun SHA256(bitstring): bitstring.

(* ECDH key exchange *)
type G.
type exponent.
const gen: G.
fun P224(G, exponent): G.
equation forall x: exponent, y: exponent; P224(P224(gen, x), y) = P224(P224(gen, y), x).

fun exponent2private_key(exponent): private_key [typeConverter].
fun private_key2exponent(private_key): exponent [typeConverter].
fun G2public_key(G): public_key [typeConverter].
fun public_key2G(public_key): G [typeConverter].
fun G2dhkey(G): dhkey [typeConverter].

(* private key to public key *)
letfun get_pub_key(pri_k: private_key) = G2public_key(P224(gen, private_key2exponent(pri_k))).

(* dhkey calculation *)
letfun get_dhkey(pub_k: public_key, pri_k: private_key) = G2dhkey(P224(public_key2G(pub_k), private_key2exponent(pri_k))).

(* KDF: derive symmetric key. ANSI_X_963_KDF_SHA256 *)
(* shared_secret, entropy *)
fun kdf(bitstring, bitstring): bitstring.


(* set input/output as precise as described *)
set preciseActions = true.

(* 0. pairing module *)
let step0o() = (
	new exp_o: exponent;
	let pri_o = exponent2private_key(exp_o) in
	let pub_o = get_pub_key(pri_o) in
	insert pkeyitem(pri_o);
	insert pid(pub_o);
	insert plost(lost);
	insert padv(pub_o)	
).


(* 1. tracking module *)
let step1f() = (
	get plost(=lost) in
	get padv(pub_o) in
	new exp_f: exponent;
	let pri_f = exponent2private_key(exp_f) in
	let pub_f = get_pub_key(pri_f) in
	let index1 = SHA256(pubkey2bitstring(pub_o)) in
	let dhkey_of = get_dhkey(pub_o, pri_f) in
	let symkey = kdf(dhkey2bitstring(dhkey_of), pubkey2bitstring(pub_f)) in
	let sealedbox_loc = AES_GCM_enc(location, bitstring2key(first16bytes(symkey)), bitstring2iv(last16bytes(symkey))) in
	out(pre_app_ch1, (index1, pub_f, sealedbox_loc))
).

let step1s() = (
	get plost(=lost) in
	in(pre_app_ch1, (index1: bitstring, pub_f: public_key, sealedbox_loc: sealedbox));
	out(cloud_ch, (index1, pub_f, sealedbox_loc));
	insert pfound(found);
	insert ploc(index1, pub_f, sealedbox_loc)
).


(* 2. querying module *)
let step2o() = (
	get pfound(=found) in
	get pkeyitem(pri_o) in
	get pid(pub_o) in
	let index2 = SHA256(pubkey2bitstring(pub_o)) in
	out(pre_app_ch2, index2);
	in(pre_app_ch2, (index1: bitstring, pub_f: public_key, sealedbox_loc: sealedbox));
	let dhkey_fo = get_dhkey(pub_f, pri_o) in
	let symkey = kdf(dhkey2bitstring(dhkey_fo), pubkey2bitstring(pub_f)) in
	let loc = AES_GCM_dec(sealedbox_loc, bitstring2key(first16bytes(symkey)), bitstring2iv(last16bytes(symkey))) in
	if loc = location then
		0
).

let step2s() = (
	get ploc(index1, pub_f, sealedbox_loc) in
	in(pre_app_ch2, index2: bitstring);
	out(cloud_ch, index2);
	if index1 = index2 then
		out(pre_app_ch2, (index1, pub_f, sealedbox_loc))
).


(* confidentiality properties *)
(* (step0o()) | (step1f()) | (step1s()) | (step2o()) | (step2s()) *)

query attacker(location).

process


