theory Apple_AirTag

begin

builtins: diffie-hellman

functions: 
	/* KDF: derive symmetric key. ANSI_X_963_KDF_SHA256 */
	kdf/2, update_const/0, diversify_const/0, zero_const/0,

	/* P-224 Curve */
	add/2, mul/2, gen/0,

  	/* Hash function */
	SHA256/1,
	AES_GCM_enc/2, AES_GCM_dec/2 [destructor],

	location/0 [private]
equations:
	AES_GCM_dec(AES_GCM_enc(m, k), k) = m
	
export queries:
"
set preciseActions = true.
query attacker(location).
"

options: enableStateOpt, compress-events,
translation-allow-pattern-lookups




/* Tracker */
let tracker(~Pi_0, ~SKSi_0) = 
	out(<~Pi_0, 'adv'>)


/* Other Participants */
let participant(~pre_app_ch2: channel) = 
	event Secret(location);
	in(<Pi, 'adv'>);
	new ~s;
	let PKs = 'g' ^ ~s in
	let DHKey = Pi ^ ~s in
	let sealedbox_loc = AES_GCM_enc(location, DHKey) in
	let index = SHA256(Pi) in
	out(~pre_app_ch2, <sealedbox_loc, PKs, index, 'location_report'>)



/* Server */
let server(~pre_app_ch1: channel, ~pre_app_ch2: channel) = 
	in(~pre_app_ch2, <sealedbox_loc, PKs, index, 'location_report'>);

	in(~pre_app_ch1, <index1, 'query_by_index'>);

	if (index = index1) then (
		out(~pre_app_ch1, <sealedbox_loc, PKs, index, 'location_report_index'>)
	)


/* phone */
let phone(~pre_app_ch1: channel, ~di, ~Pi_0, ~SKSi_0) = 
	let index = SHA256(~Pi_0) in
	out(~pre_app_ch1, <index, 'query_by_index'>);
	in(~pre_app_ch1, <sealedbox_loc, PKs, index1, 'location_report_index'>);
	let DHKey = PKs ^ ~di in
	let loc = AES_GCM_dec(sealedbox_loc, DHKey) in
	0



/* replication of an AirTag to cover "mix and match" like attacks */
process:
	/* For privacy, cloud is equipment to open channel for data communication between finder device and owner device. */
	/* For security, cloud channel is private. */

	new ~pre_app_ch1: channel;
	new ~pre_app_ch2: channel;
	new ~di;
	let Pi = 'g' ^ ~di in
	new ~SKSi_0;

	(
		!tracker(Pi, ~SKSi_0) | 
		!participant(~pre_app_ch2) |
		!server(~pre_app_ch1, ~pre_app_ch2) |
		!phone(~pre_app_ch1, ~di, Pi, ~SKSi_0)
	)
	

/* P9: Confidentiality of location: Apple server receives en-
crypted location data from Finder devices and temporarily
stores it. Only the owner devices can decrypt and read raw
locations from the encrypted data. Apple cannot read this in-
formation. */
lemma confidentiality [ output=[spthy] ]:
"
	( 
		All x #i. (Secret(x) @ i ==> not (Ex #k. KU(x) @ k))
	)
"

end