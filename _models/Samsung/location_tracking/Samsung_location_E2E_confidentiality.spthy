/*
(* For privacy, cloud is equipment to open channel for data communication between finder device and owner device. *)
(* For security, cloud channel is private. *)
(* If there is account verification while communicating with the cloud, then use account channel. *)
*/


theory Samsung_SmartTag

begin

functions:

  //SmartTag spec
  privacy_const/0, signature_const/0, Mode_E2E/0, Mode_NoE2E/0,
  derive_key/2, 

  get_pk/1,
  AES_enc/3, AES_dec/3 [destructor],
  IES_enc/2, IES_dec/2 [destructor],
  SHA256/1,

  location/0 [private]

  
equations:
  //Secp256k1(Secp256k1(gen, x), y) = Secp256k1(Secp256k1(gen, y), x),
  AES_dec(AES_enc(mes, k, v), k, v) = mes,
  IES_dec(IES_enc(m, get_pk(sk)), sk) = m



export queries:
"
set preciseActions = true.
query attacker(location).
"


/* Tracker */
let tracker(~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~rand2) = 
  let privKey = derive_key(~encryption_key, privacy_const) in
  let signKey = derive_key(~encryption_key, signature_const) in

  let seedi = <~rand2, ~seed, ~rand2> in

  /* ignore the first8bytes and first4bytes actions */
  let privId = AES_enc(seedi, privKey, ~privacyIV) in
  let signature = AES_enc(<privId, ~E2EMode>, signKey, ~privacyIV) in
  out(<privId, ~E2EMode, signature, 'adv'>)


/* Other participants as finder */
let participant(~pre_app_ch2: channel) = 
  event Secret(location);
  in(<privId, E2EMode, signature, 'adv'>);
  if (E2EMode = Mode_E2E) then (
    out(~pre_app_ch2, <privId, 'tracker_ID'>);
    in(~pre_app_ch2, <pubKey1, 'tracker_PubKey'>);

    /* IES: new pubkey; compute dhkey; encrypt */
    let sealedbox_loc = IES_enc(location, pubKey1) in
    out(~pre_app_ch2, <privId, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>)
  ) else (
    out(~pre_app_ch2, <privId, E2EMode, signature, location, 'location_report_NoE2E'>)
  )


/* Server */
let server(~pre_app_ch1: channel, ~pre_app_ch2: channel, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~owner_account, ~enc_pri1, ~pubKey1, ~iv) = 
  (
    if (~E2EMode = Mode_E2E) then (
      /* finder querys the public key and uploads location report */
      in(~pre_app_ch2, <privId, 'tracker_ID'>);
      let privKey = derive_key(~encryption_key, privacy_const) in
      let <r2, seed_adv, r2> = AES_dec(privId, privKey, ~privacyIV) in
      if (seed_adv = ~seed) then (
        out(~pre_app_ch2, <~pubKey1, 'tracker_PubKey'>);
        in(~pre_app_ch2, <privId, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>);
        let signKey = derive_key(~encryption_key, signature_const) in
        if (signature = AES_enc(<privId, E2EMode>, signKey, ~privacyIV)) then (
          
          /* owner querys location report */
          in(~pre_app_ch1, <owner_account2, 'query_location_E2E'>);
          if(~owner_account = owner_account2) then (
            out(~pre_app_ch1, <sealedbox_loc, <~enc_pri1, ~pubKey1, ~iv>, 'location_E2E_and_key_item'>)
          )
        )
      )
    )
    
  )

  | (

    /* finder uploads location report */
    in(~pre_app_ch2, <privId, E2EMode, signature, loc, 'location_report_NoE2E'>);
    let signKey = derive_key(~encryption_key, signature_const) in
    if (signature = AES_enc(<privId, E2EMode>, signKey, ~privacyIV)) then (
      
      /* owner querys location report */
      in(~pre_app_ch1, <owner_account2, 'query_location_NoE2E'>);
      if(~owner_account = owner_account2) then (
        out(~pre_app_ch1, <loc, 'location_NoE2E'>)
      )
    )
  )



/* Phone as owner */
let phone(~pre_app_ch1: channel, ~owner_account, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~six_pin, ~iv) = 
  if (~E2EMode = Mode_E2E) then (
    out(~pre_app_ch1, <~owner_account, 'query_location_E2E'>);
    in(~pre_app_ch1, <sealedbox_loc, <enc_pri1, pubKey1, ~iv>, 'location_E2E_and_key_item'>);
    let key = SHA256(~six_pin) in
    let pri1 = AES_enc(enc_pri1, key, ~iv) in
    let loc = IES_dec(sealedbox_loc, pri1) in
    0
  ) else (
    out(~pre_app_ch1, <~owner_account, 'query_location_NoE2E'>);
    in(~pre_app_ch1, <loc_plain, 'location_NoE2E'>);
    let loc = loc_plain in
    0
  )



process:

!(
  // Private Channel
  new ~pre_app_ch1: channel;
  new ~pre_app_ch2: channel;

  new ~owner_account;
  new ~encryption_key;
  new ~seed;
  new ~privacyIV;

  /* initialize the key item */
  new ~six_pin;
  let key = SHA256(~six_pin) in
  new ~iv;
  new ~pri_1;
  let pubKey_1 = get_pk(~pri_1) in
  let enc_pri_1 = AES_enc(~pri_1, key, ~iv) in

  (
  new ~rand2; 
  tracker(~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~rand2) |
  participant(~pre_app_ch2) |
  server(~pre_app_ch1, ~pre_app_ch2, ~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~owner_account, enc_pri_1, pubKey_1, ~iv) |
  phone(~pre_app_ch1, ~owner_account, ~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~six_pin, ~iv)
  )
  
)




lemma confidentiality [ output=[spthy] ]:
"
  ( 
    All x #i. (Secret(x) @ i ==> not (Ex #k. KU(x) @ k))
  )
"

end