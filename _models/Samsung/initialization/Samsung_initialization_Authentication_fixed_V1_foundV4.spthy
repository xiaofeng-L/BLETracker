theory Samsung_SmartTag


begin

builtins: diffie-hellman

functions:
	/* constant value */
	smartthings_const/0,
	bleAuthentication_const/0,
	privacy_const/0,
	poolsize_const/0,
	bound_const/0,
	unbound_const/0,
	serial_number_const/0,
	
	SHA256/1,
	AES_enc/3, AES_dec/3 [destructor],
	
	/* Samsung SmartTag key calculation */
	derive_encryption_key/2,
	kdf2/2,
	
	/* modify and derive private key from bt_addr */
	kdf1/1,
	
	/* hash table */
	derive_hashed_sn/1,
	hash_table/1 [destructor],
	
	/* Calculate all id */
	get_id/4
	
equations:
	AES_dec(AES_enc(mes, k, v), k, v) = mes,
	hash_table(derive_hashed_sn(x)) = x
	
	
export queries:
"
set preciseActions = true.
set reconstructTrace = true.
query sn: bitstring; event(PairSuccess(sn)) && event(Bounded(sn)).
"

options: enableStateOpt, compress-events


/* server */
let server(~sec_ch : channel) = 
	
	// The owner bind this Tag, before the attacker acquire it.
	// 'sn_owner' means the all ownership stored in Samsung server.
	in(~sec_ch, <sn_owner, 'sn_owner'>);
	event Bounded(sn_owner);
	
	let sn1 = serial_number_const in

	in(<hashed_sn_p, rand, 'pre_app1'>);
	
	let sn = hash_table(hashed_sn_p) in
	let pri_p = kdf1(sn) in
	let pub_p = 'g' ^ pri_p in

	new ~pri_c;
	let pub_c = 'g' ^ ~pri_c in
	let dhkey_PC = pub_p ^ ~pri_c in
	let encryption_key = derive_encryption_key(dhkey_PC, rand) in
	
	event SendPubkey(~sec_ch, ~pri_c, pub_c); 
	out(<encryption_key, pub_c, 'pre_app1'>);
	
	in(<sn_p1, 'pre_app1'>);

	event StepsEnd1();
	
	if (sn_p1 = sn_owner) then (
		out(<bound_const, 'pre_app1'>)
	)
	else (
		out(<unbound_const, 'pre_app1'>);
		in(<sn_p, encryption_key_c, 'pre_app1'>);
		if (sn_p = sn_owner) then (
			out(<bound_const, 'pre_app1'>)
		)
		else(
			if ((sn = sn_p) & (encryption_key = encryption_key_c)) then (
				/* fixed: verify the bind status again */
				event StepsEnd2();
				new ~secure_param;
				event SendSecureParam(~secure_param);
				out(<~secure_param, 'pre_app1'>);
				
				let privacy_key = kdf2(encryption_key, privacy_const) in
				let id = get_id(privacy_key, ~secure_param, ~secure_param, ~secure_param) in
				/* We add a comparison process to ensure that the SmartTag is paired correctly */
				out(~sec_ch, <id, 'id_s'>)
			)
		)
	)




let phone(~sec_ch : channel) = 
	/* PK exchange */
	in(<hashed_sn_p, 'open_ch'>);
	new ~rand;
	
	
	out(<hashed_sn_p, ~rand, 'pre_app1'>);
	in(<encryption_key, pub_c, 'pre_app1'>);
	
	event ReceivePubKey(~sec_ch, pub_c);
	
	out(<~rand, pub_c, 'open_ch'>);

	/* authentication */
	let auth_key = kdf2(encryption_key, bleAuthentication_const) in
	new ~n1;
	out(<~n1, 'open_ch'>);
	
	in(<n2, 'open_ch'>);
	let encrypted_nonce1 = AES_enc(smartthings_const, auth_key, n2) in
	out(<encrypted_nonce1, 'open_ch'>);
	
	in(<encrypted_nonce2, 'open_ch'>);
	let dec_mes_2 = AES_dec(encrypted_nonce2, auth_key, ~n1) in
	
	event StepcEnd1();
	
	if smartthings_const = dec_mes_2 then (
		let link_key = kdf2(encryption_key, n2) in

		
		in(<encrypted_sn_p1, 'open_ch'>);
		let sn_p1 = AES_dec(encrypted_sn_p1, link_key, n2) in
		event ReceiveSn(sn_p1);
		out(<sn_p1, 'pre_app1'>);
	
		/* id sharing */

		in(<encrypted_sn_p, 'open_ch'>);
		let sn_p = AES_dec(encrypted_sn_p, link_key, n2) in
		event ReceiveSn(sn_p);
		
		out(<sn_p, encryption_key, 'pre_app1'>);
		
		in(<isbound, 'pre_app1'>);
		
		if (isbound = unbound_const) then (

			in(<secure_param, 'pre_app1'>);
			event ReceiveSecureParam(secure_param);
			
			let encrypted_param = AES_enc(secure_param, link_key, n2) in
			out(<encrypted_param, 'open_ch'>);
			
			let privacy_key = kdf2(encryption_key, privacy_const) in
			let id = get_id(privacy_key, secure_param, secure_param, secure_param) in
			event StepcEnd2()
			
		)
	)


let tracker(~sec_ch : channel) = 
	let sn = serial_number_const in

	// The owner bind this Tag, before the attacker acquire it.
	out(~sec_ch, <sn, 'sn_owner'>);


	let hashed_sn = derive_hashed_sn(sn) in
	let pri_p = kdf1(sn) in
	let pub_p = 'g' ^ pri_p in

	out(<hashed_sn, 'open_ch'>);
	in(<rand, pub_c, 'open_ch'>);
	let dhkey_CP = pub_c ^ pri_p in
	let encryption_key = derive_encryption_key(dhkey_CP, rand) in
	 
	/* authentication stage 1 */
	let auth_key = kdf2(encryption_key, bleAuthentication_const) in
	new ~n2;
	out(<~n2, 'open_ch'>);
	
	in(<n1, 'open_ch'>);
	let encrypted_nonce2 = AES_enc(smartthings_const, auth_key, n1) in
	out(<encrypted_nonce2, 'open_ch'>);
	
	in(<encrypted_nonce1, 'open_ch'>);
	let dec_mes_1 = AES_dec(encrypted_nonce1, auth_key, ~n2) in
	
	event SteppEnd1();
	
	if smartthings_const = dec_mes_1 then (
		let link_key = kdf2(encryption_key, ~n2) in

		/* id sharing */
		let encrypted_sn_p = AES_enc(sn, link_key, ~n2) in
		event SendSn(sn, encrypted_sn_p);
		out(<encrypted_sn_p, 'open_ch'>);

		out(<encrypted_sn_p, 'open_ch'>);
		
		in(<encrypted_param, 'open_ch'>);
		let secure_param = AES_dec(encrypted_param, link_key, ~n2) in
		
		
		let privacy_key = kdf2(encryption_key, privacy_const) in
		let id = get_id(privacy_key, secure_param, secure_param, secure_param) in
		
		/* We add a comparison process to ensure that the SmartTag is paired correctly */
		out(~sec_ch, <id, sn, 'id_p'>);
		
		event SteppEnd2()
		
	)

/* We add a comparison process to ensure that the SmartTag is paired correctly */
let compare(~sec_ch : channel) = 
	in(~sec_ch, <id_s, 'id_s'>);
	in(~sec_ch, <id_p, sn, 'id_p'>);
	if id_s = id_p then (
		event PairSuccess(sn)
	)



/* replication of an SmartTag to cover "mix and match" like attacks */
process:
	
	new ~sec_ch : channel;
	
	(	
		!(server(~sec_ch)) |
		!(phone(~sec_ch)) |
		!(tracker(~sec_ch)) |
		!(compare(~sec_ch))
	)
	

/* used to eliminate partial deconstructions */
lemma sn_sources[sources, output=[spthy]]:
"
	All sn #i. ReceiveSn(sn) @ i ==> (
		(Ex enc_sn #t. SendSn(sn, enc_sn) @ t & t < i) |
		(Ex #t. KU(sn) @ t & t < i)
	)
"

/* P3: Authentication of tracker. Only one SmartTag can
be registered to an item at a time.

We convert this property to "if a tracker
was bonded with an account, it cannot be bonded to another
account successfully". */
lemma pair_consistency[output=[spthy]]:
"
	( 
		All device #i. (
			Bounded(device) @ i ==> not( Ex #j. PairSuccess(device) @ j & i<j  ) )
	)
"


	
end
