/*
(* For privacy, cloud is equipment to open channel for data communication between finder device and owner device. *)
(* For security, cloud channel is private. *)
(* If there is account verification while communicating with the cloud, then use account channel. *)
*/


theory Samsung_SmartTag

begin

functions:

  //SmartTag spec
  privacy_const/0, signature_const/0, Mode_E2E/0, Mode_NoE2E/0,
  derive_key/2, 

  get_sk/1 [private],
  AES_enc/3, AES_dec/3 [destructor],
  IES_enc/2, IES_dec/2 [destructor],
  SHA256/1,

  location/0 [private],

  /* addition for mitigation */
  kdf/2, update_const/0, diversify_const/0,
  add/2, mul/2, gen/0
  
equations:
  AES_dec(AES_enc(mes, k, v), k, v) = mes,
  IES_dec(IES_enc(m, pk), get_sk(pk)) = m



/* set input/output as precise as described */
export queries:
"
set preciseActions = true.
query attacker(location).

"


/* ******* fixed: Only E2E ******* */
/* Tracker */
let tracker(~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~rand2) = 
  let privKey = derive_key(~encryption_key, privacy_const) in
  let signKey = derive_key(~encryption_key, signature_const) in

  let seedi = <~rand2, ~seed, ~rand2> in

  /* ignore the first8bytes and first4bytes actions */
  let privId = AES_enc(seedi, privKey, ~privacyIV) in
  let signature = AES_enc(<privId, ~E2EMode>, signKey, ~privacyIV) in
  out(<privId, ~E2EMode, signature, 'adv'>)


/* Other participants as finder */
let participant(~sec_ch: channel) = 
  event Secret(location);
  in(<privId, E2EMode, signature, 'adv'>);
  if (E2EMode = Mode_E2E) then (
    out(~sec_ch, <privId, 'tracker_ID'>);
    in(~sec_ch, <pubKey1, 'tracker_PubKey'>);

    /* IES: new pubkey; compute dhkey; encrypt */
    let sealedbox_loc = IES_enc(location, pubKey1) in
    out(~sec_ch, <privId, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>)
  )


/* Server */
let server(~sec_ch: channel, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~owner_account, ~enc_pri1, ~pubKey1, ~iv) = 
  if (~E2EMode = Mode_E2E) then (

    /* finder querys the public key and uploads location report */
    in(~sec_ch, <privId, 'tracker_ID'>);
    /* for privacy */
    out(<privId, 'tracker_ID'>);

    let privKey = derive_key(~encryption_key, privacy_const) in
    let <r2, seed_adv, r2> = AES_dec(privId, privKey, ~privacyIV) in
    if (seed_adv = ~seed) then (
      out(~sec_ch, <~pubKey1, 'tracker_PubKey'>);
      in(~sec_ch, <privId, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>);
      /* for privacy */
      out(<privId, E2EMode, signature, sealedbox_loc, 'location_report_E2E'>);

      let signKey = derive_key(~encryption_key, signature_const) in
      if (signature = AES_enc(<privId, E2EMode>, signKey, ~privacyIV)) then (
        
        /* owner querys location report */
        in(~sec_ch, <owner_account2, 'query_location_E2E'>);
        /* for privacy */
        out(<owner_account2, 'query_location_E2E'>);

        if(~owner_account = owner_account2) then (
          out(~sec_ch, <sealedbox_loc, <~enc_pri1, ~pubKey1, ~iv>, 'location_E2E_and_key_item'>)
        )
      )
    )
    
  )



/* Phone as owner */
let phone(~sec_ch: channel, ~owner_account, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~six_pin, ~iv) = 
  if (~E2EMode = Mode_E2E) then (
    out(~sec_ch, <~owner_account, 'query_location_E2E'>);
    in(~sec_ch, <sealedbox_loc, <enc_pri1, pubKey1, ~iv>, 'location_E2E_and_key_item'>);
    let key = SHA256(~six_pin) in

    /* simplified the sk's rotation and merge it with the IES encryption/decryption */
    let pri1 = get_sk(pubKey1) in
    let loc = IES_dec(sealedbox_loc, pri1) in
    0
  )


process:

(
  // Private Channel
  new ~sec_ch: channel;

  new ~owner_account;
  new ~encryption_key;
  new ~seed;
  new ~privacyIV;
  new ~rand2; 

  /* initialize the key item */
  new ~six_pin;
  let key = SHA256(~six_pin) in
  new ~iv;

  new ~P;
  new ~SKS; 

  let SKSi_0 = kdf(~SKS, update_const) in
  let <ui_0, vi_0> = kdf(SKSi_0, diversify_const) in
  let Pi_0 = add(mul(ui_0, ~P), mul(vi_0, gen)) in
  let di_0 = get_sk(Pi_0) in
  let enc_di_0 = AES_enc(di_0, key, ~iv) in
  let enc_SKSi_0 = AES_enc(SKSi_0, key, ~iv) in


  (
  !tracker(~sec_ch, ~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~rand2) |
  !participant(~sec_ch) |
  !server(~sec_ch, ~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~owner_account, enc_di_0, Pi_0, ~iv) |
  !phone(~sec_ch, ~owner_account, ~encryption_key, ~seed, ~privacyIV, Mode_E2E, ~six_pin, ~iv) 
  )
  
)




lemma confidentiality [ output=[spthy] ]:
"
  ( 
    All x #i. (Secret(x) @ i ==> not (Ex #k. KU(x) @ k))
  )
"

end