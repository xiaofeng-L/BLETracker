/*
(* For privacy, cloud is equipment to open channel for data communication between finder device and owner device. *)
(* For security, cloud channel is private. *)
(* If there is account verification while communicating with the cloud, then use account channel. *)
*/


theory Samsung_SmartTag

begin

functions:

  //SmartTag spec
  privacy_const/0, signature_const/0, Mode_E2E/0, Mode_NoE2E/0,
  derive_key/2, 

  pk/1,
  AES_enc/3, AES_dec/3 [destructor],
  IES_enc/2, IES_dec/2 [destructor],
  SHA256/1,

  location_plain/0 [private],
  get_IDs/4, one_of/2, database_IDS/2 [destructor]


  
equations:
  //Secp256k1(Secp256k1(gen, x), y) = Secp256k1(Secp256k1(gen, y), x),
  AES_dec(AES_enc(mes, k, v), k, v) = mes,
  IES_dec(IES_enc(m, dhkey_ab), dhkey_ab) = m,
  database_IDS(IDs, one_of(IDs, r)) = r


/* Tracker */
let tracker(~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~rand2, ~poolSize) = 
  let privKey = derive_key(~encryption_key, privacy_const) in
  let signKey = derive_key(~encryption_key, signature_const) in


  let IDs = get_IDs(privKey, ~seed, ~privacyIV, ~poolSize) in
  
  let privId = one_of(IDs, ~rand2) in
  let signature = AES_enc(<privId, ~E2EMode>, signKey, ~privacyIV) in
  out(<privId, ~E2EMode, signature, 'adv'>)


/* Other participants as finder */
let participant(~pre_app_ch2: channel) = 
  event Secret(location_plain);
  in(<privId, E2EMode, signature, 'adv'>);
  if (E2EMode = Mode_NoE2E) then (
    out(~pre_app_ch2, <privId, E2EMode, signature, location_plain, 'location_report_NoE2E'>)
  )


/* Other participants as finder */
let attacker(~pre_app_ch2: channel) = 
  event Secret(location_plain);
  in(<privId, E2EMode, signature, 'adv'>);
  if (E2EMode = Mode_NoE2E) then (
    out(~pre_app_ch2, <privId, E2EMode, signature, location_plain, 'location_report_NoE2E'>);

    /* attacker's knowledge */
    out(<privId, E2EMode, signature, location_plain, 'location_report_NoE2E'>)
  )


/* Server */
let server(~pre_app_ch1: channel, ~pre_app_ch2: channel, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~owner_account, ~poolSize) = 
  if (~E2EMode = Mode_NoE2E) then (

    /* finder uploads location report */
    in(~pre_app_ch2, <privId, E2EMode1, signature, location, 'location_report_NoE2E'>);

    let privKey = derive_key(~encryption_key, privacy_const) in
    let signKey = derive_key(~encryption_key, signature_const) in
    let IDs = get_IDs(privKey, ~seed, ~privacyIV, ~poolSize) in
    let r = database_IDS(IDs, privId) in 

    if (one_of(IDs, r) = privId) then (

      if (signature = AES_enc(<privId, E2EMode1>, signKey, ~privacyIV)) then (
        
        /* owner querys location report */
        in(~pre_app_ch1, <owner_account2, 'query_location_E2E'>);

        out(~pre_app_ch1, <location, 'location_NoE2E'>)
      )
    )

    
  )


/* Phone as owner */
let phone(~pre_app_ch1: channel, ~owner_account, ~encryption_key, ~seed, ~privacyIV, ~E2EMode, ~poolSize) = 
  if (~E2EMode = Mode_NoE2E) then (
    out(~pre_app_ch1, <~owner_account, 'query_location_E2E'>);
    in(~pre_app_ch1, <location, 'location_NoE2E'>);
    let loc = location in
    0
  )



equivLemma:
(
  // Private Channel
  new ~pre_app_ch1: channel;
  new ~pre_app_ch2: channel;

  new ~owner_account;
  new ~encryption_key;
  new ~seed;
  new ~privacyIV;
  new ~poolSize;

  !(
  new ~rand2; 
  tracker(~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~rand2, ~poolSize) |
  attacker(~pre_app_ch2) |
  server(~pre_app_ch1, ~pre_app_ch2, ~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~owner_account, ~poolSize) |
  phone(~pre_app_ch1, ~owner_account, ~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~poolSize)
  )
  
)

(
  // Private Channel
  new ~pre_app_ch1: channel;
  new ~pre_app_ch2: channel;

  !(
    new ~owner_account;
    new ~encryption_key;
    new ~seed;
    new ~privacyIV;
    new ~poolSize;
    (
    new ~rand2; 
    tracker(~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~rand2, ~poolSize) |
    attacker(~pre_app_ch2) |
    server(~pre_app_ch1, ~pre_app_ch2, ~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~owner_account, ~poolSize) |
    phone(~pre_app_ch1, ~owner_account, ~encryption_key, ~seed, ~privacyIV, Mode_NoE2E, ~poolSize)
    )
  )
)


end