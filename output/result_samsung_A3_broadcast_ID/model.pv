free ch: channel.

(* type defination *)
type key.
type iv.



(* Concatenation helper functions *)
fun concat(bitstring, bitstring): bitstring.
fun first8bytes(bitstring): bitstring.

fun AES_enc(bitstring, key, iv): bitstring.
fun AES_dec(bitstring, key, iv): bitstring.
equation forall k: key, v: iv, mes: bitstring; AES_dec(AES_enc(mes, k, v), k, v) = mes.

fun derive_key(bitstring, bitstring): key.

const privacy: bitstring.

let ID_rotation(encryption_key: bitstring, seed: bitstring, privacyIV: iv) = (
  new r2: bitstring;
  let privacyKey = derive_key(encryption_key, privacy) in
  let seedi = concat(concat(r2, seed), r2) in
  let IDi = first8bytes(AES_enc(seedi, privacyKey, privacyIV)) in
  (* Observational equivalence: real-or-random secrecy *)
  new random: bitstring;
  out(ch, choice[IDi, random])
).

process
new encryption_key: bitstring;
new seed: bitstring;
new privacyIV: iv;
!ID_rotation(encryption_key, seed, privacyIV)