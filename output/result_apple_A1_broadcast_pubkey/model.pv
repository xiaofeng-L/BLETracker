free ch: channel.

(* Concatenation helper functions *)
fun concat(bitstring, bitstring): bitstring.
fun first_part(bitstring): bitstring.
fun last_part(bitstring): bitstring.
equation forall b1: bitstring, b2: bitstring; first_part(concat(b1, b2)) = b1.
equation forall b1: bitstring, b2: bitstring; last_part(concat(b1, b2)) = b2.
fun first32bytes(bitstring): bitstring.
fun last32bytes(bitstring): bitstring.

fun kdf(bitstring): bitstring.

(* ECDH key exchange *)
type G.
type exponent.
const gen: G.
fun P224(G, exponent): G.
equation forall x: exponent, y: exponent; P224(P224(gen, x), y) = P224(P224(gen, y), x).
fun bitstring2exponent(bitstring): exponent [typeConverter].
fun add(G, G): G.

const update: bitstring.
const diversify: bitstring.

let pubkey_rotation(SKS: bitstring) = (
  new P: G;
  (* priori knowledge *)
  out(ch, P);
  let SKSi = kdf(concat(SKS, update)) in
  let uvi = kdf(concat(SKSi, diversify)) in
  let ui = first32bytes(uvi) in
  let vi = last32bytes(uvi) in
  let Pi = add(P224(P, bitstring2exponent(ui)), P224(gen, bitstring2exponent(vi))) in
  (* Observational equivalence: real-or-random secrecy *)
  new random: G;
  out(ch, choice[Pi, random])
).

process
new SKS: bitstring;
!pubkey_rotation(SKS)
