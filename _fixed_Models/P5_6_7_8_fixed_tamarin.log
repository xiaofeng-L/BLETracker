maude tool: 'maude'
 checking version: 3.1. OK.
 checking installation: OK.

theory Apple_AirTag begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: AES_GCM_dec/3[destructor], AES_GCM_enc/3,
           ECIES_dec/2[destructor], ECIES_enc/2, PairingSession_const/0, SHA256/1,
           SerialNumberProtection_const/0, ServerSharedSecret_const/0, add/2,
           fst/1[destructor], get_id/2, get_point_x/1, kdf/2, pair/2, pk/1,
           qa/0[private,destructor], qe/0[private,destructor], sign/2,
           snd/1[destructor], verify/2, zero_const/0
equations:
    AES_GCM_dec(AES_GCM_enc(mes, k, v), k, v) = mes,
    ECIES_dec(ECIES_enc(m, pk(sk)), sk) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(m, sk), pk(sk)) = m

heuristic: p

/* looping facts with injective instances: L_CellLocked/2, L_PureState/2
*/













lemma uuid_source [output=[spthy], sources]:
  all-traces
  "∀ e #i.
    (RecvUUID( e ) @ #i) ⇒ (∃ #t. (UUIDSource( e ) @ #t) ∧ (#t < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ e #i.
  (RecvUUID( e ) @ #i) ∧ ∀ #t. (UUIDSource( e ) @ #t) ⇒ ¬(#t < #i)"
*/
by sorry

lemma S2_verify_sources [sources, output=[spthy]]:
  all-traces
  "∀ S2 S2_data #i.
    (RecvS2( S2, S2_data ) @ #i) ⇒
    ((∃ #t. (SendS2( S2 ) @ #t) ∧ (#t < #i)) ∨
     (∃ #t. (!KU( S2_data ) @ #t) ∧ (#t < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ S2 S2_data #i.
  (RecvS2( S2, S2_data ) @ #i)
 ∧
  (∀ #t. (SendS2( S2 ) @ #t) ⇒ ¬(#t < #i)) ∧
  (∀ #t. (!KU( S2_data ) @ #t) ⇒ ¬(#t < #i))"
*/
by sorry

lemma e2_sources [sources, output=[spthy]]:
  all-traces
  "∀ E2_data E2 #i.
    (RecvE2( E2_data, E2 ) @ #i) ⇒
    ((∃ #t. (SendE2( E2 ) @ #t) ∧ (#t < #i)) ∨
     (∃ #t. (!KU( E2_data ) @ #t) ∧ (#t < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ E2_data E2 #i.
  (RecvE2( E2_data, E2 ) @ #i)
 ∧
  (∀ #t. (SendE2( E2 ) @ #t) ⇒ ¬(#t < #i)) ∧
  (∀ #t. (!KU( E2_data ) @ #t) ⇒ ¬(#t < #i))"
*/
by sorry

lemma e3_sources [sources, output=[spthy]]:
  all-traces
  "∀ tokenNew E3 SeedS #i.
    (RecvE3( tokenNew, E3, SeedS ) @ #i) ⇒
    ((∃ #t. (SendE3( E3, SeedS ) @ #t) ∧ (#t < #i)) ∨
     (∃ #t. (!KU( tokenNew ) @ #t) ∧ (#t < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tokenNew E3 SeedS #i.
  (RecvE3( tokenNew, E3, SeedS ) @ #i)
 ∧
  (∀ #t. (SendE3( E3, SeedS ) @ #t) ⇒ ¬(#t < #i)) ∧
  (∀ #t. (!KU( tokenNew ) @ #t) ⇒ ¬(#t < #i))"
*/
by sorry

lemma h1_source [output=[spthy], sources]:
  all-traces
  "∀ e #i. (SendH1( e ) @ #i) ⇒ (∃ #t. (H1Source( e ) @ #t) ∧ (#t < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ e #i. (SendH1( e ) @ #i) ∧ ∀ #t. (H1Source( e ) @ #t) ⇒ ¬(#t < #i)"
*/
by sorry

lemma session_source [output=[spthy], sources]:
  all-traces
  "∀ e #i.
    (RecvSessionNonce( e ) @ #i) ⇒
    (∃ #t. (SessionNonceEncSource( e ) @ #t) ∧ (#t < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ e #i.
  (RecvSessionNonce( e ) @ #i)
 ∧
  ∀ #t. (SessionNonceEncSource( e ) @ #t) ⇒ ¬(#t < #i)"
*/
by sorry

lemma e1_source [output=[spthy], sources]:
  all-traces
  "∀ e #i.
    (SendE1( e ) @ #i) ⇒ (∃ #t. (E1EncSource( e ) @ #t) ∧ (#t < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ e #i. (SendE1( e ) @ #i) ∧ ∀ #t. (E1EncSource( e ) @ #t) ⇒ ¬(#t < #i)"
*/
by sorry

lemma confidentiality_d [output=[spthy]]:
  all-traces "∀ x #i. (Secret_d( x ) @ #i) ⇒ (¬(∃ #k. !KU( x ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret_d( x ) @ #i) ∧ ∃ #k. (!KU( x ) @ #k)"
*/
simplify
solve( State_111111121111111111111( ~UUID, ~UUID_paired, ~r_, ~s_,
                                    ~sec_ch, ~token, SHA256(<s, r>), other_param, ~E1, ~SessionNonce, E2, E3,
                                    S2, SeedS, iCloudldentifier, r, s
       ) ▶₀ #i )
  case eventSendSS_0_1111111211111111111
  solve( !KU( add(s, ~s_) ) @ #k )
    case c_add
    solve( !KU( ~s_ ) @ #vk.20 )
      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
      solve( Ack( ~sec_ch, <SHA256(<'g'^~s_, ~r_>), E2, 'pre_app1'>
             ) ▶₁ #vr.3 )
        case newiCloudldentifier_0_111111111
        solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier,
                                  ~sec_ch, ~token.1,
                                  ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.4, data.4, Version.4, 
                                             E1.1, SeedK1, s, r>,
                                            pk(qe)),
                                  SHA256(<'g'^~s_.1, ~r_.1>)
               ) ▶₀ #vr.14 )
          case insecchchannelHEpreapp_1_1111111111
          solve( !KU( ECIES_enc(<SessionNonce.1, ~token, ~UUID, SN.2, data.2, 
                                 Version.2, E1.1, SeedK1, s, r>,
                                pk(qe))
                 ) @ #vk.27 )
            case c_ECIES_enc
            solve( !KU( ~token ) @ #vk.42 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( !KU( ~UUID ) @ #vk.50 )
                case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                solve( !KU( pk(qe) ) @ #vk.58 )
                  case c_pk
                  by solve( !KU( qe ) @ #vk.86 )
                qed
              qed
            qed
          next
            case inSessionNonceEopench_0_11111121
            solve( !KU( ~s ) @ #vk.29 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.2, 'pre_app1'>
                     ) ▶₁ #vr.27 )
                case newiCloudldentifier_0_111111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s_, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                        Version.7, E1.3, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.3, ~r_.3>)
                          ) ▶₀ #vr.37 )
              next
                case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s_, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                        Version.7, E1.3, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.3, ~r_.3>)
                          ) ▶₀ #vr.37 )
              qed
            qed
          qed
        qed
      next
        case outsecchchannelSHAgsrEpreapp_1_1111111211111111
        solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier,
                                  ~sec_ch, ~token.1,
                                  ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.4, data.4, Version.4, 
                                             E1.1, SeedK1, s, r>,
                                            pk(qe)),
                                  SHA256(<'g'^~s_.1, ~r_.1>)
               ) ▶₀ #vr.14 )
          case insecchchannelHEpreapp_1_1111111111
          solve( !KU( ECIES_enc(<SessionNonce.1, ~token, ~UUID, SN.2, data.2, 
                                 Version.2, E1.1, SeedK1, s, r>,
                                pk(qe))
                 ) @ #vk.29 )
            case c_ECIES_enc
            solve( !KU( ~token ) @ #vk.46 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( !KU( ~UUID ) @ #vk.54 )
                case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                solve( !KU( pk(qe) ) @ #vk.62 )
                  case c_pk
                  by solve( !KU( qe ) @ #vk.90 )
                qed
              qed
            qed
          next
            case inSessionNonceEopench_0_11111121
            solve( !KU( ~s ) @ #vk.31 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.2, 'pre_app1'>
                     ) ▶₁ #vr.27 )
                case newiCloudldentifier_0_111111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s_, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                        Version.7, E1.3, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.3, ~r_.3>)
                          ) ▶₀ #vr.37 )
              next
                case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s_, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                        Version.7, E1.3, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.3, ~r_.3>)
                          ) ▶₀ #vr.37 )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma confidentiality_P [output=[spthy]]:
  all-traces "∀ x #i. (Secret_P( x ) @ #i) ⇒ (¬(∃ #k. !KU( x ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret_P( x ) @ #i) ∧ ∃ #k. (!KU( x ) @ #k)"
*/
simplify
solve( State_111111211111111111111111111( ~Status, ~UUID, ~UUID_paired,
                                          ~exp_2, ~sec_ch, ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS,
                                          r_, ~r, ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
       ) ▶₀ #i )
  case eventRecvEtknewESeedS_0_111111211111111111111111
  solve( !KU( add('g'^~s, pkS) ) @ #k )
    case c_add
    solve( !KU( sign(<~UUID, SessionNonce, SeedS, SHA256(<pkS, r_>), E1, 
                      AES_GCM_enc(tk_new,
                                  kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                      PairingSession_const),
                                  kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                      PairingSession_const))
                     >,
                     qa)
           ) @ #vk.9 )
      case c_sign
      by solve( !KU( qa ) @ #vk.22 )
    next
      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
      solve( !KU( ~r_ ) @ #vk.4 )
        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_1
        solve( !KU( 'g'^~s ) @ #vk.27 )
          case c_exp
          solve( !KU( ~s ) @ #vk.44 )
            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
            solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                   ) ▶₁ #vr.14 )
              case newiCloudldentifier_0_111111111
              solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                        ~sec_ch, ~token.1,
                                        ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.7, data.7, Version.7, 
                                                   E1, ~SeedK1, s.7, r.7>,
                                                  pk(qe)),
                                        SHA256(<'g'^~s_, ~r_>)
                     ) ▶₀ #vr.24 )
                case insecchchannelHEpreapp_1_1111111111
                solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                       Version.3, E1, ~SeedK1, s.3, r.3>,
                                      pk(qe))
                       ) @ #vk.45 )
                  case c_ECIES_enc
                  solve( !KU( ~token ) @ #vk.65 )
                    case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                    solve( !KU( ~UUID ) @ #vk.72 )
                      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                      solve( !KU( ~SeedK1 ) @ #vk.87 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( pk(qe) ) @ #vk.91 )
                          case c_pk
                          by solve( !KU( qe ) @ #vk.127 )
                        qed
                      qed
                    qed
                  qed
                next
                  case inSessionNonceEopench_0_11111121
                  solve( Ack( ~sec_ch,
                              <SHA256(<'g'^~s_, ~r_>), 
                               ECIES_enc(<SessionNonce, ~token, ~UUID, ~SN, ~data, ~Version, E1, 
                                          ~SeedK1, ~s, ~r>,
                                         pk(qe)), 
                               'pre_app1'>
                         ) ▶₁ #vr.33 )
                    case newiCloudldentifier_0_111111111
                    solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.2,
                                              ~sec_ch, ~token.1,
                                              ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                         Version.7, E1.2, SeedK1.3, s.7, r.7>,
                                                        pk(qe)),
                                              SHA256(<'g'^~s_.2, ~r_.2>)
                           ) ▶₀ #vr.40 )
                      case insecchchannelHEpreapp_1_1111111111
                      solve( !KU( ECIES_enc(<SessionNonce.2, ~token, ~UUID, SN.5, data.5, 
                                             Version.5, E1.2, SeedK1.3, s.5, r.5>,
                                            pk(qe))
                             ) @ #vk.51 )
                        case c_ECIES_enc
                        solve( !KU( ~token ) @ #vk.65 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( ~UUID ) @ #vk.72 )
                            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                            solve( !KU( pk(qe) ) @ #vk.80 )
                              case c_pk
                              by solve( !KU( qe ) @ #vk.111 )
                            qed
                          qed
                        qed
                      next
                        case inSessionNonceEopench_0_11111121
                        solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.3, ~r_.3>), E2.2, 'pre_app1'>
                               ) ▶₁ #vr.53 )
                          case newiCloudldentifier_0_111111111
                          by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s, ~sec_ch,
                                                       ~token.1,
                                                       ECIES_enc(<SessionNonce.4, ~token.1, ~UUID, SN.8, 
                                                                  data.8, Version.8, E1.4, SeedK1.4, s.8, r.8
                                                                 >,
                                                                 pk(qe)),
                                                       SHA256(<'g'^~s_.4, ~r_.4>)
                                    ) ▶₀ #vr.63 )
                        next
                          case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                          by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s, ~sec_ch,
                                                       ~token.1,
                                                       ECIES_enc(<SessionNonce.4, ~token.1, ~UUID, SN.8, 
                                                                  data.8, Version.8, E1.4, SeedK1.4, s.8, r.8
                                                                 >,
                                                                 pk(qe)),
                                                       SHA256(<'g'^~s_.4, ~r_.4>)
                                    ) ▶₀ #vr.63 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outsecchchannelSHAgsrEpreapp_1_1111111211111111
              solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                        ~sec_ch, ~token.1,
                                        ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.7, data.7, Version.7, 
                                                   E1, ~SeedK1, s.7, r.7>,
                                                  pk(qe)),
                                        SHA256(<'g'^~s_, ~r_>)
                     ) ▶₀ #vr.24 )
                case insecchchannelHEpreapp_1_1111111111
                solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                       Version.3, E1, ~SeedK1, s.3, r.3>,
                                      pk(qe))
                       ) @ #vk.47 )
                  case c_ECIES_enc
                  solve( !KU( ~token ) @ #vk.69 )
                    case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                    solve( !KU( ~UUID ) @ #vk.76 )
                      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                      solve( !KU( ~SeedK1 ) @ #vk.91 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( pk(qe) ) @ #vk.95 )
                          case c_pk
                          by solve( !KU( qe ) @ #vk.131 )
                        qed
                      qed
                    qed
                  qed
                next
                  case inSessionNonceEopench_0_11111121
                  solve( Ack( ~sec_ch,
                              <SHA256(<'g'^~s_, ~r_>), 
                               ECIES_enc(<SessionNonce, ~token, ~UUID, ~SN, ~data, ~Version, E1, 
                                          ~SeedK1, ~s, ~r>,
                                         pk(qe)), 
                               'pre_app1'>
                         ) ▶₁ #vr.33 )
                    case newiCloudldentifier_0_111111111
                    solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.2,
                                              ~sec_ch, ~token.1,
                                              ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.7, data.7, 
                                                         Version.7, E1.2, SeedK1.3, s.7, r.7>,
                                                        pk(qe)),
                                              SHA256(<'g'^~s_.2, ~r_.2>)
                           ) ▶₀ #vr.40 )
                      case insecchchannelHEpreapp_1_1111111111
                      solve( !KU( ECIES_enc(<SessionNonce.2, ~token, ~UUID, SN.5, data.5, 
                                             Version.5, E1.2, SeedK1.3, s.5, r.5>,
                                            pk(qe))
                             ) @ #vk.53 )
                        case c_ECIES_enc
                        solve( !KU( ~token ) @ #vk.69 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( ~UUID ) @ #vk.76 )
                            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                            solve( !KU( pk(qe) ) @ #vk.84 )
                              case c_pk
                              by solve( !KU( qe ) @ #vk.115 )
                            qed
                          qed
                        qed
                      next
                        case inSessionNonceEopench_0_11111121
                        solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.3, ~r_.3>), E2.2, 'pre_app1'>
                               ) ▶₁ #vr.53 )
                          case newiCloudldentifier_0_111111111
                          by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s, ~sec_ch,
                                                       ~token.1,
                                                       ECIES_enc(<SessionNonce.4, ~token.1, ~UUID, SN.8, 
                                                                  data.8, Version.8, E1.4, SeedK1.4, s.8, r.8
                                                                 >,
                                                                 pk(qe)),
                                                       SHA256(<'g'^~s_.4, ~r_.4>)
                                    ) ▶₀ #vr.63 )
                        next
                          case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                          by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~s, ~sec_ch,
                                                       ~token.1,
                                                       ECIES_enc(<SessionNonce.4, ~token.1, ~UUID, SN.8, 
                                                                  data.8, Version.8, E1.4, SeedK1.4, s.8, r.8
                                                                 >,
                                                                 pk(qe)),
                                                       SHA256(<'g'^~s_.4, ~r_.4>)
                                    ) ▶₀ #vr.63 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_2
        solve( !KU( 'g'^~s ) @ #vk.28 )
          case c_exp
          solve( !KU( ~s ) @ #vk.48 )
            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
            solve( !KU( 'g'^~s_ ) @ #vk.9 )
              case c_exp
              solve( !KU( ~s_ ) @ #vk.65 )
                case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                       ) ▶₁ #vr.14 )
                  case newiCloudldentifier_0_111111111
                  solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                            ~sec_ch, ~token.1,
                                            ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.9, data.9, 
                                                       Version.9, E1, ~SeedK1, s.7, r.7>,
                                                      pk(qe)),
                                            SHA256(<'g'^~s_, ~r_>)
                         ) ▶₀ #vr.24 )
                    case insecchchannelHEpreapp_1_1111111111
                    solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                           Version.3, E1, ~SeedK1, s.3, r.3>,
                                          pk(qe))
                           ) @ #vk.56 )
                      case c_ECIES_enc
                      solve( !KU( ~token ) @ #vk.86 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( ~UUID ) @ #vk.93 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( ~SeedK1 ) @ #vk.108 )
                            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                            solve( !KU( pk(qe) ) @ #vk.112 )
                              case c_pk
                              by solve( !KU( qe ) @ #vk.148 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case inSessionNonceEopench_0_11111121
                      solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.4, 'pre_app1'>
                             ) ▶₁ #vr.37 )
                        case newiCloudldentifier_0_111111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, 
                                                                data.9, Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.3, ~r_.3>)
                                  ) ▶₀ #vr.47 )
                      next
                        case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, 
                                                                data.9, Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.3, ~r_.3>)
                                  ) ▶₀ #vr.47 )
                      qed
                    qed
                  qed
                next
                  case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                  solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                            ~sec_ch, ~token.1,
                                            ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.9, data.9, 
                                                       Version.9, E1, ~SeedK1, s.7, r.7>,
                                                      pk(qe)),
                                            SHA256(<'g'^~s_, ~r_>)
                         ) ▶₀ #vr.24 )
                    case insecchchannelHEpreapp_1_1111111111
                    solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                           Version.3, E1, ~SeedK1, s.3, r.3>,
                                          pk(qe))
                           ) @ #vk.58 )
                      case c_ECIES_enc
                      solve( !KU( ~token ) @ #vk.90 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( ~UUID ) @ #vk.97 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( ~SeedK1 ) @ #vk.112 )
                            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                            solve( !KU( pk(qe) ) @ #vk.116 )
                              case c_pk
                              by solve( !KU( qe ) @ #vk.152 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case inSessionNonceEopench_0_11111121
                      solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.4, 'pre_app1'>
                             ) ▶₁ #vr.37 )
                        case newiCloudldentifier_0_111111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, 
                                                                data.9, Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.3, ~r_.3>)
                                  ) ▶₀ #vr.47 )
                      next
                        case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, 
                                                                data.9, Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.3, ~r_.3>)
                                  ) ▶₀ #vr.47 )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                     ) ▶₁ #vr.14 )
                case newiCloudldentifier_0_111111111
                solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                          ~sec_ch, ~token.1,
                                          ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.9, data.9, Version.9, 
                                                     E1, ~SeedK1, s.7, r.7>,
                                                    pk(qe)),
                                          SHA256(<'g'^~s_, ~r_>)
                       ) ▶₀ #vr.24 )
                  case insecchchannelHEpreapp_1_1111111111
                  solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                         Version.3, E1, ~SeedK1, s.3, r.3>,
                                        pk(qe))
                         ) @ #vk.53 )
                    case c_ECIES_enc
                    solve( !KU( ~token ) @ #vk.81 )
                      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                      solve( !KU( ~UUID ) @ #vk.88 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( ~SeedK1 ) @ #vk.103 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( pk(qe) ) @ #vk.107 )
                            case c_pk
                            by solve( !KU( qe ) @ #vk.143 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case inSessionNonceEopench_0_11111121
                    solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.4, 'pre_app1'>
                           ) ▶₁ #vr.37 )
                      case newiCloudldentifier_0_111111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, data.9, 
                                                              Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.3, ~r_.3>)
                                ) ▶₀ #vr.47 )
                    next
                      case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, data.9, 
                                                              Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.3, ~r_.3>)
                                ) ▶₀ #vr.47 )
                    qed
                  qed
                qed
              next
                case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                                          ~sec_ch, ~token.1,
                                          ECIES_enc(<SessionNonce, ~token.1, ~UUID, SN.9, data.9, Version.9, 
                                                     E1, ~SeedK1, s.7, r.7>,
                                                    pk(qe)),
                                          SHA256(<'g'^~s_, ~r_>)
                       ) ▶₀ #vr.24 )
                  case insecchchannelHEpreapp_1_1111111111
                  solve( !KU( ECIES_enc(<SessionNonce, ~token, ~UUID, SN.3, data.3, 
                                         Version.3, E1, ~SeedK1, s.3, r.3>,
                                        pk(qe))
                         ) @ #vk.55 )
                    case c_ECIES_enc
                    solve( !KU( ~token ) @ #vk.85 )
                      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                      solve( !KU( ~UUID ) @ #vk.92 )
                        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                        solve( !KU( ~SeedK1 ) @ #vk.107 )
                          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                          solve( !KU( pk(qe) ) @ #vk.111 )
                            case c_pk
                            by solve( !KU( qe ) @ #vk.147 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case inSessionNonceEopench_0_11111121
                    solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.2, ~r_.2>), E2.4, 'pre_app1'>
                           ) ▶₁ #vr.37 )
                      case newiCloudldentifier_0_111111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, data.9, 
                                                              Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.3, ~r_.3>)
                                ) ▶₀ #vr.47 )
                    next
                      case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r_, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.2, ~token.1, ~UUID, SN.9, data.9, 
                                                              Version.9, E1.2, SeedK1.3, s.9, r.9>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.3, ~r_.3>)
                                ) ▶₀ #vr.47 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma confidentiality_SK [output=[spthy]]:
  all-traces "∀ x #i. (Secret_SK( x ) @ #i) ⇒ (¬(∃ #k. !KU( x ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret_SK( x ) @ #i) ∧ ∃ #k. (!KU( x ) @ #k)"
*/
simplify
solve( State_111111211111111111111111111( ~Status, ~UUID, ~UUID_paired,
                                          ~exp_2, ~sec_ch, ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS,
                                          r_, ~r, ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
       ) ▶₀ #i )
  case eventRecvEtknewESeedS_0_111111211111111111111111
  solve( !KU( kdf(get_point_x(add('g'^~s, pkS)), <~r, r_>) ) @ #k )
    case c_kdf
    solve( !KU( ~r ) @ #vk.19 )
      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
      solve( !KU( get_point_x(add('g'^~s, pkS)) ) @ #vk.23 )
        case c_get_point_x
        solve( !KU( add('g'^~s, pkS) ) @ #vk.36 )
          case c_add
          solve( !KU( sign(<~UUID, SessionNonce, SeedS, SHA256(<pkS, r_>), E1, 
                            AES_GCM_enc(tk_new,
                                        kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                            PairingSession_const),
                                        kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                            PairingSession_const))
                           >,
                           qa)
                 ) @ #vk.13 )
            case c_sign
            by solve( !KU( qa ) @ #vk.42 )
          next
            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
            solve( !KU( ~r_ ) @ #vk.8 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_1
              solve( !KU( 'g'^~s ) @ #vk.47 )
                case c_exp
                solve( !KU( ~s ) @ #vk.64 )
                  case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                  solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                         ) ▶₁ #vr.15 )
                    case newiCloudldentifier_0_111111111
                    by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                 ~token.1,
                                                 ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                            Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                           pk(qe)),
                                                 SHA256(<'g'^~s_.2, ~r_.2>)
                              ) ▶₀ #vr.25 )
                  next
                    case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                    by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                 ~token.1,
                                                 ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                            Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                           pk(qe)),
                                                 SHA256(<'g'^~s_.2, ~r_.2>)
                              ) ▶₀ #vr.25 )
                  qed
                qed
              qed
            next
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_2
              solve( !KU( 'g'^~s ) @ #vk.48 )
                case c_exp
                solve( !KU( ~s ) @ #vk.68 )
                  case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                  solve( !KU( 'g'^~s_ ) @ #vk.13 )
                    case c_exp
                    solve( !KU( ~s_ ) @ #vk.85 )
                      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                      solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                             ) ▶₁ #vr.15 )
                        case newiCloudldentifier_0_111111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.11, 
                                                                data.11, Version.11, E1.2, SeedK1.2, s.7, r.7
                                                               >,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.2, ~r_.2>)
                                  ) ▶₀ #vr.25 )
                      next
                        case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                        by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                     ~token.1,
                                                     ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.11, 
                                                                data.11, Version.11, E1.2, SeedK1.2, s.7, r.7
                                                               >,
                                                               pk(qe)),
                                                     SHA256(<'g'^~s_.2, ~r_.2>)
                                  ) ▶₀ #vr.25 )
                      qed
                    qed
                  next
                    case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
                    solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                           ) ▶₁ #vr.15 )
                      case newiCloudldentifier_0_111111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.11, 
                                                              data.11, Version.11, E1.2, SeedK1.2, s.7, r.7>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.2, ~r_.2>)
                                ) ▶₀ #vr.25 )
                    next
                      case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                      by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~r, ~sec_ch,
                                                   ~token.1,
                                                   ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.11, 
                                                              data.11, Version.11, E1.2, SeedK1.2, s.7, r.7>,
                                                             pk(qe)),
                                                   SHA256(<'g'^~s_.2, ~r_.2>)
                                ) ▶₀ #vr.25 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma confidentiality_SSS [output=[spthy]]:
  all-traces "∀ x #i. (Secret_SSS( x ) @ #i) ⇒ (¬(∃ #k. !KU( x ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret_SSS( x ) @ #i) ∧ ∃ #k. (!KU( x ) @ #k)"
*/
simplify
solve( State_111111211111111111111111111( ~Status, ~UUID, ~UUID_paired,
                                          ~exp_2, ~sec_ch, ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS,
                                          r_, ~r, ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
       ) ▶₀ #i )
  case eventRecvEtknewESeedS_0_111111211111111111111111
  solve( !KU( kdf(<SeedS, ~SeedK1>, SerialNumberProtection_const) ) @ #k )
    case c_kdf
    solve( !KU( ~SeedK1 ) @ #vk.19 )
      case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
      solve( !KU( sign(<~UUID, SessionNonce, SeedS, SHA256(<pkS, r_>), E1, 
                        AES_GCM_enc(tk_new,
                                    kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                        PairingSession_const),
                                    kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                        PairingSession_const))
                       >,
                       qa)
             ) @ #vk.11 )
        case c_sign
        by solve( !KU( qa ) @ #vk.40 )
      next
        case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
        solve( !KU( ~r_ ) @ #vk.6 )
          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_1
          solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                 ) ▶₁ #vr.15 )
            case newiCloudldentifier_0_111111111
            by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                         ~token.1,
                                         ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.7, data.7, Version.7, 
                                                    E1.2, SeedK1.2, s.7, r.7>,
                                                   pk(qe)),
                                         SHA256(<'g'^~s_.2, ~r_.2>)
                      ) ▶₀ #vr.25 )
          next
            case outsecchchannelSHAgsrEpreapp_1_1111111211111111
            by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                         ~token.1,
                                         ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.7, data.7, Version.7, 
                                                    E1.2, SeedK1.2, s.7, r.7>,
                                                   pk(qe)),
                                         SHA256(<'g'^~s_.2, ~r_.2>)
                      ) ▶₀ #vr.25 )
          qed
        next
          case outgsrESeedSSiCloudldentifieropench_0_111111121111111111_case_2
          solve( !KU( 'g'^~s_ ) @ #vk.6 )
            case c_exp
            solve( !KU( ~s_ ) @ #vk.66 )
              case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
              solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                     ) ▶₁ #vr.15 )
                case newiCloudldentifier_0_111111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                        Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.2, ~r_.2>)
                          ) ▶₀ #vr.25 )
              next
                case outsecchchannelSHAgsrEpreapp_1_1111111211111111
                by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                             ~token.1,
                                             ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                        Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                       pk(qe)),
                                             SHA256(<'g'^~s_.2, ~r_.2>)
                          ) ▶₀ #vr.25 )
              qed
            qed
          next
            case outgsrESeedSSiCloudldentifieropench_0_111111121111111111
            solve( Ack( ~sec_ch, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>
                   ) ▶₁ #vr.15 )
              case newiCloudldentifier_0_111111111
              by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                           ~token.1,
                                           ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                      Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                     pk(qe)),
                                           SHA256(<'g'^~s_.2, ~r_.2>)
                        ) ▶₀ #vr.25 )
            next
              case outsecchchannelSHAgsrEpreapp_1_1111111211111111
              by solve( State_11111111111( ~UUID.1, ~UUID_paired.1, ~SeedK1, ~sec_ch,
                                           ~token.1,
                                           ECIES_enc(<SessionNonce.1, ~token.1, ~UUID, SN.9, data.9, 
                                                      Version.9, E1.2, SeedK1.2, s.7, r.7>,
                                                     pk(qe)),
                                           SHA256(<'g'^~s_.2, ~r_.2>)
                        ) ▶₀ #vr.25 )
            qed
          qed
        qed
      qed
    qed
  qed
qed





































rule (modulo E) Init[color=#ffffff, process="new ~sec_ch.1:channel;"]:
   [ Fr( ~sec_ch.1 ), Fr( ~UUID_paired.1 ), Fr( ~UUID.1 ), Fr( ~token.1 ) ]
  --[ Init( ), UUIDSource( ~UUID.1 ) ]->
   [ !Semistate_111111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ) ]

  /*
  rule (modulo AC) Init[color=#ffffff, process="new ~sec_ch.1:channel;"]:
     [ Fr( ~sec_ch ), Fr( ~UUID_paired ), Fr( ~UUID ), Fr( ~token ) ]
    --[ Init( ), UUIDSource( ~UUID ) ]->
     [ !Semistate_111111( ~UUID, ~UUID_paired, ~sec_ch, ~token ) ]
  */

rule (modulo E) newiCloudldentifier_0_111111111[color=#658040,
                                                process="new ~iCloudldentifier.1;"]:
   [
   State_111111111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ),
   Fr( ~iCloudldentifier.1 ), Message( ~sec_ch.1, x.2 )
   ]
  -->
   [
   Let_11111111111( x.2, ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                    ~sec_ch.1, ~token.1
   ),
   Ack( ~sec_ch.1, x.2 )
   ]

  /*
  rule (modulo AC) newiCloudldentifier_0_111111111[color=#658040,
                                                   process="new ~iCloudldentifier.1;"]:
     [
     State_111111111( ~UUID, ~UUID_paired, ~sec_ch, ~token ),
     Fr( ~iCloudldentifier ), Message( ~sec_ch, x )
     ]
    -->
     [
     Let_11111111111( x, ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                      ~token
     ),
     Ack( ~sec_ch, x )
     ]
  */

rule (modulo E) insecchchannelHEpreapp_1_1111111111[color=#658040,
                                                    process="in(~sec_ch.1:channel,<H1.1, E2.1, 'pre_app1'>);"]:
   [
   Let_11111111111( <H1.1, E2.1, 'pre_app1'>, ~UUID.1, ~UUID_paired.1,
                    ~iCloudldentifier.1, ~sec_ch.1, ~token.1
   )
   ]
  -->
   [
   State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                      ~sec_ch.1, ~token.1, E2.1, H1.1
   )
   ]

  /*
  rule (modulo AC) insecchchannelHEpreapp_1_1111111111[color=#658040,
                                                       process="in(~sec_ch.1:channel,<H1.1, E2.1, 'pre_app1'>);"]:
     [
     Let_11111111111( <H1, E2, 'pre_app1'>, ~UUID, ~UUID_paired,
                      ~iCloudldentifier, ~sec_ch, ~token
     )
     ]
    -->
     [
     State_11111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                        ~token, E2, H1
     )
     ]
  */

rule (modulo E) letEdataECIESdecEqe_0_11111111111[color=#ffffff,
                                                  process="let E2_data.1=ECIES_dec(E2.1, qe)"]:
   [
   State_11111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                      ~sec_ch.1, ~token.1, E2.1, H1.1
   )
   ]
  -->
   [
   Let_111111111111( <E2.1, qe>, ~UUID.1, ~UUID_paired.1,
                     ~iCloudldentifier.1, ~sec_ch.1, ~token.1, E2.1, H1.1
   )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) letEdataECIESdecEqe_0_11111111111[color=#ffffff,
                                                     process="let E2_data.1=ECIES_dec(E2.1, qe)"]:
     [
     State_11111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                        ~token, E2, H1
     )
     ]
    -->
     [
     Let_111111111111( <E2, qe>, ~UUID, ~UUID_paired, ~iCloudldentifier,
                       ~sec_ch, ~token, E2, H1
     )
     ]
    // loop breaker: [0]
  */

rule (modulo E) letEdataECIESdecEqe_1_11111111111[color=#ffffff,
                                                  process="let E2_data.1=ECIES_dec(E2.1, qe)"]:
   [
   Let_111111111111( <ECIES_enc(E2_data.1, pk(sk)), sk>, ~UUID.1,
                     ~UUID_paired.1, ~iCloudldentifier.1, ~sec_ch.1, ~token.1, E2.1, H1.1
   )
   ]
  -->
   [
   State_111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                       ~sec_ch.1, ~token.1, E2.1, E2_data.1, H1.1
   )
   ]

  /*
  rule (modulo AC) letEdataECIESdecEqe_1_11111111111[color=#ffffff,
                                                     process="let E2_data.1=ECIES_dec(E2.1, qe)"]:
     [
     Let_111111111111( <ECIES_enc(E2_data, pk(sk)), sk>, ~UUID, ~UUID_paired,
                       ~iCloudldentifier, ~sec_ch, ~token, E2, H1
     )
     ]
    -->
     [
     State_111111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                         ~token, E2, E2_data, H1
     )
     ]
  */

rule (modulo E) eventRecvEEdataE_0_111111111111[color=#658040,
                                                process="event RecvE2( E2_data.1, E2.1 );"]:
   [
   State_111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                       ~sec_ch.1, ~token.1, E2.1, E2_data.1, H1.1
   )
   ]
  --[ RecvE2( E2_data.1, E2.1 ) ]->
   [
   Let_11111111111111( E2_data.1, ~UUID.1, ~UUID_paired.1,
                       ~iCloudldentifier.1, ~sec_ch.1, ~token.1, E2.1, E2_data.1, H1.1
   )
   ]

  /*
  rule (modulo AC) eventRecvEEdataE_0_111111111111[color=#658040,
                                                   process="event RecvE2( E2_data.1, E2.1 );"]:
     [
     State_111111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                         ~token, E2, E2_data, H1
     )
     ]
    --[ RecvE2( E2_data, E2 ) ]->
     [
     Let_11111111111111( E2_data, ~UUID, ~UUID_paired, ~iCloudldentifier,
                         ~sec_ch, ~token, E2, E2_data, H1
     )
     ]
  */

rule (modulo E) letSessionNoncetokenUUIDSNdataVersionESeedKsrEdata_1_1111111111111[color=#ffffff,
                                                                                   process="let <SessionNonce.1, token.2, UUID.2, SN.1, data.1, Version.1, E1.1, 
 SeedK1.1, s.1, r.1>=E2_data.1"]:
   [
   Let_11111111111111( <SessionNonce.1, token.2, UUID.2, SN.1, data.1, 
                        Version.1, E1.1, SeedK1.1, s.1, r.1>,
                       ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1, ~sec_ch.1, ~token.1, E2.1,
                       E2_data.1, H1.1
   )
   ]
  -->
   [
   State_11111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                         ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                         SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   )
   ]

  /*
  rule (modulo AC) letSessionNoncetokenUUIDSNdataVersionESeedKsrEdata_1_1111111111111[color=#ffffff,
                                                                                      process="let <SessionNonce.1, token.2, UUID.2, SN.1, data.1, Version.1, E1.1, 
 SeedK1.1, s.1, r.1>=E2_data.1"]:
     [
     Let_11111111111111( <SessionNonce, token, UUID, SN, data, Version, E1, 
                          SeedK1, s, r>,
                         ~UUID.1, ~UUID_paired, ~iCloudldentifier, ~sec_ch, ~token.1, E2, E2_data,
                         H1
     )
     ]
    -->
     [
     State_11111111111111( ~UUID.1, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                           ~token.1, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data,
                           r, s, UUID, token
     )
     ]
  */

rule (modulo E) eventRecvUUIDUUID_0_11111111111111[color=#658040,
                                                   process="event RecvUUID( UUID.2 );"]:
   [
   State_11111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                         ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                         SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   )
   ]
  --[ RecvUUID( UUID.2 ), RecvSessionNonce( SessionNonce.1 ) ]->
   [
   State_1111111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                           ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                           SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   )
   ]

  /*
  rule (modulo AC) eventRecvUUIDUUID_0_11111111111111[color=#658040,
                                                      process="event RecvUUID( UUID.2 );"]:
     [
     State_11111111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                           ~token, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data, r,
                           s, UUID.1, token.1
     )
     ]
    --[ RecvUUID( UUID.1 ), RecvSessionNonce( SessionNonce ) ]->
     [
     State_1111111111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                             ~token, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data, r,
                             s, UUID.1, token.1
     )
     ]
  */

restriction Restr_ifUUIDUUIDpaired_1_1111111111111111_1:
  "∀ x #NOW x.1.
    (Restr_ifUUIDUUIDpaired_1_1111111111111111_1( x, x.1 ) @ #NOW) ⇒
    (¬(x = x.1))"
  // safety formula

rule (modulo E) ifUUIDUUIDpaired_1_1111111111111111[color=#658040,
                                                    process="if UUID.2 = ~UUID_paired.1"]:
   [
   State_1111111111111111( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                           ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                           SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   )
   ]
  --[ Restr_ifUUIDUUIDpaired_1_1111111111111111_1( UUID.2, ~UUID_paired.1 )
  ]->
   [
   State_11111111111111112( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                            ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                            SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   )
   ]

  /*
  rule (modulo AC) ifUUIDUUIDpaired_1_1111111111111111[color=#658040,
                                                       process="if UUID.2 = ~UUID_paired.1"]:
     [
     State_1111111111111111( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                             ~token, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data, r,
                             s, UUID.1, token.1
     )
     ]
    --[ Restr_ifUUIDUUIDpaired_1_1111111111111111_1( UUID.1, ~UUID_paired )
    ]->
     [
     State_11111111111111112( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                              ~token, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data, r,
                              s, UUID.1, token.1
     )
     ]
  */

restriction Restr_iftokentoken_0_11111111111111112_1:
  "∀ x #NOW x.1.
    (Restr_iftokentoken_0_11111111111111112_1( x, x.1 ) @ #NOW) ⇒ (x = x.1)"
  // safety formula

rule (modulo E) iftokentoken_0_11111111111111112[color=#658040,
                                                 process="if token.2 = ~token.1"]:
   [
   State_11111111111111112( ~UUID.1, ~UUID_paired.1, ~iCloudldentifier.1,
                            ~sec_ch.1, ~token.1, E1.1, E2.1, E2_data.1, H1.1, SN.1, SeedK1.1,
                            SessionNonce.1, Version.1, data.1, r.1, s.1, UUID.2, token.2
   ),
   Fr( ~token_new.1 ), Fr( ~SeedS.1 )
   ]
  --[
  SendH1( H1.1 ), SendE1( E1.1 ),
  Restr_iftokentoken_0_11111111111111112_1( token.2, ~token.1 )
  ]->
   [
   Message( ~sec_ch.1,
            <~iCloudldentifier.1, ~SeedS.1, 
             sign(<UUID.2, SessionNonce.1, ~SeedS.1, H1.1, E1.1, 
                   AES_GCM_enc(~token_new.1,
                               kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                                   PairingSession_const),
                               kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                                   PairingSession_const))
                  >,
                  qa), 
             AES_GCM_enc(~token_new.1,
                         kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                             PairingSession_const),
                         kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                             PairingSession_const)), 
             s.1, r.1, 'pre_app1'>
   ),
   Semistate_11111111111111112111111( ~SeedS.1, ~UUID.1, ~UUID_paired.1,
                                      ~iCloudldentifier.1, ~sec_ch.1, ~token.1, ~token_new.1, E1.1, E2.1,
                                      E2_data.1, H1.1, SN.1, SeedK1.1, SessionNonce.1, Version.1, data.1, r.1,
                                      s.1, UUID.2, token.2
   )
   ]

  /*
  rule (modulo AC) iftokentoken_0_11111111111111112[color=#658040,
                                                    process="if token.2 = ~token.1"]:
     [
     State_11111111111111112( ~UUID, ~UUID_paired, ~iCloudldentifier, ~sec_ch,
                              ~token, E1, E2, E2_data, H1, SN, SeedK1, SessionNonce, Version, data, r,
                              s, UUID.1, token.1
     ),
     Fr( ~token_new ), Fr( ~SeedS )
     ]
    --[
    SendH1( H1 ), SendE1( E1 ),
    Restr_iftokentoken_0_11111111111111112_1( token.1, ~token )
    ]->
     [
     Message( ~sec_ch,
              <~iCloudldentifier, ~SeedS, 
               sign(<UUID.1, SessionNonce, ~SeedS, H1, E1, 
                     AES_GCM_enc(~token_new,
                                 kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                                     PairingSession_const),
                                 kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                                     PairingSession_const))
                    >,
                    qa), 
               AES_GCM_enc(~token_new,
                           kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                               PairingSession_const),
                           kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                               PairingSession_const)), 
               s, r, 'pre_app1'>
     ),
     Semistate_11111111111111112111111( ~SeedS, ~UUID, ~UUID_paired,
                                        ~iCloudldentifier, ~sec_ch, ~token, ~token_new, E1, E2, E2_data, H1,
                                        SN, SeedK1, SessionNonce, Version, data, r, s, UUID.1, token.1
     )
     ]
  */

rule (modulo E) outsecchchanneliCloudldentifierSeedSsignUUIDSessionNonceSeedSHEAESGCMenctokennewkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstqaAESGCMenctokennewkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstsrpreapp_1_1111111111111111211111[color=#658040,
                                                                                                                                                                                                                                                                                                                                                                                             process="out(~sec_ch.1:channel,<~iCloudldentifier.1, ~SeedS.1, 
 sign(<UUID.2, SessionNonce.1, ~SeedS.1, H1.1, E1.1, 
       AES_GCM_enc(~token_new.1,
                   kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                       PairingSession_const),
                   kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                       PairingSession_const))
      >,
      qa), 
 AES_GCM_enc(~token_new.1,
             kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                 PairingSession_const),
             kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                 PairingSession_const)), 
 s.1, r.1, 'pre_app1'>);"]:
   [
   Semistate_11111111111111112111111( ~SeedS.1, ~UUID.1, ~UUID_paired.1,
                                      ~iCloudldentifier.1, ~sec_ch.1, ~token.1, ~token_new.1, E1.1, E2.1,
                                      E2_data.1, H1.1, SN.1, SeedK1.1, SessionNonce.1, Version.1, data.1, r.1,
                                      s.1, UUID.2, token.2
   ),
   Ack( ~sec_ch.1,
        <~iCloudldentifier.1, ~SeedS.1, 
         sign(<UUID.2, SessionNonce.1, ~SeedS.1, H1.1, E1.1, 
               AES_GCM_enc(~token_new.1,
                           kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                               PairingSession_const),
                           kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                               PairingSession_const))
              >,
              qa), 
         AES_GCM_enc(~token_new.1,
                     kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                         PairingSession_const),
                     kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                         PairingSession_const)), 
         s.1, r.1, 'pre_app1'>
   )
   ]
  --[
  SendE3( AES_GCM_enc(~token_new.1,
                      kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                          PairingSession_const),
                      kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                          PairingSession_const)),
          ~SeedS.1
  )
  ]->
   [ ]

  /*
  rule (modulo AC) outsecchchanneliCloudldentifierSeedSsignUUIDSessionNonceSeedSHEAESGCMenctokennewkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstqaAESGCMenctokennewkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstsrpreapp_1_1111111111111111211111[color=#658040,
                                                                                                                                                                                                                                                                                                                                                                                                process="out(~sec_ch.1:channel,<~iCloudldentifier.1, ~SeedS.1, 
 sign(<UUID.2, SessionNonce.1, ~SeedS.1, H1.1, E1.1, 
       AES_GCM_enc(~token_new.1,
                   kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                       PairingSession_const),
                   kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                       PairingSession_const))
      >,
      qa), 
 AES_GCM_enc(~token_new.1,
             kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                 PairingSession_const),
             kdf(kdf(<~SeedS.1, SeedK1.1>, ServerSharedSecret_const),
                 PairingSession_const)), 
 s.1, r.1, 'pre_app1'>);"]:
     [
     Semistate_11111111111111112111111( ~SeedS, ~UUID, ~UUID_paired,
                                        ~iCloudldentifier, ~sec_ch, ~token, ~token_new, E1, E2, E2_data, H1,
                                        SN, SeedK1, SessionNonce, Version, data, r, s, UUID.1, token.1
     ),
     Ack( ~sec_ch,
          <~iCloudldentifier, ~SeedS, 
           sign(<UUID.1, SessionNonce, ~SeedS, H1, E1, 
                 AES_GCM_enc(~token_new,
                             kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                                 PairingSession_const),
                             kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                                 PairingSession_const))
                >,
                qa), 
           AES_GCM_enc(~token_new,
                       kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                           PairingSession_const),
                       kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                           PairingSession_const)), 
           s, r, 'pre_app1'>
     )
     ]
    --[
    SendE3( AES_GCM_enc(~token_new,
                        kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                            PairingSession_const),
                        kdf(kdf(<~SeedS, SeedK1>, ServerSharedSecret_const),
                            PairingSession_const)),
            ~SeedS
    )
    ]->
     [ ]
  */

rule (modulo E) newSessionNonce_0_111111121[color=#804640,
                                            process="new ~SessionNonce.2;"]:
   [
   State_111111121( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ),
   Fr( ~SessionNonce.2 ), Fr( ~E1.2 )
   ]
  -->
   [
   State_111111121111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1, ~E1.2,
                       ~SessionNonce.2
   ),
   Out( <~SessionNonce.2, ~E1.2, 'open_ch'> )
   ]

  /*
  rule (modulo AC) newSessionNonce_0_111111121[color=#804640,
                                               process="new ~SessionNonce.2;"]:
     [
     State_111111121( ~UUID, ~UUID_paired, ~sec_ch, ~token ),
     Fr( ~SessionNonce ), Fr( ~E1 )
     ]
    -->
     [
     State_111111121111( ~UUID, ~UUID_paired, ~sec_ch, ~token, ~E1,
                         ~SessionNonce
     ),
     Out( <~SessionNonce, ~E1, 'open_ch'> )
     ]
  */

rule (modulo E) inCEopench_0_111111121111[color=#804640,
                                          process="in(<C1.1, E2.2, 'open_ch'>);"]:
   [
   State_111111121111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1, ~E1.2,
                       ~SessionNonce.2
   ),
   In( <C1.1, E2.2, 'open_ch'> ), Fr( ~s_.1 ), Fr( ~r_.1 )
   ]
  --[ H1Source( SHA256(<'g'^~s_.1, ~r_.1>) ) ]->
   [
   Message( ~sec_ch.1, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'> ),
   Semistate_11111112111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                                ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2
   )
   ]

  /*
  rule (modulo AC) inCEopench_0_111111121111[color=#804640,
                                             process="in(<C1.1, E2.2, 'open_ch'>);"]:
     [
     State_111111121111( ~UUID, ~UUID_paired, ~sec_ch, ~token, ~E1,
                         ~SessionNonce
     ),
     In( <C1, E2, 'open_ch'> ), Fr( ~s_ ), Fr( ~r_ )
     ]
    --[ H1Source( SHA256(<'g'^~s_, ~r_>) ) ]->
     [
     Message( ~sec_ch, <SHA256(<'g'^~s_, ~r_>), E2, 'pre_app1'> ),
     Semistate_11111112111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                  ~token, C1, ~E1, ~SessionNonce, E2
     )
     ]
  */

rule (modulo E) outsecchchannelSHAgsrEpreapp_1_1111111211111111[color=#804640,
                                                                process="out(~sec_ch.1:channel,<SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>);"]:
   [
   Semistate_11111112111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                                ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2
   ),
   Ack( ~sec_ch.1, <SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'> ),
   Message( ~sec_ch.1, x.3 )
   ]
  -->
   [
   Let_111111121111111111( x.3, ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                           ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2
   ),
   Ack( ~sec_ch.1, x.3 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outsecchchannelSHAgsrEpreapp_1_1111111211111111[color=#804640,
                                                                   process="out(~sec_ch.1:channel,<SHA256(<'g'^~s_.1, ~r_.1>), E2.2, 'pre_app1'>);"]:
     [
     Semistate_11111112111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                  ~token, C1, ~E1, ~SessionNonce, E2
     ),
     Ack( ~sec_ch, <SHA256(<'g'^~s_, ~r_>), E2, 'pre_app1'> ),
     Message( ~sec_ch, x )
     ]
    -->
     [
     Let_111111121111111111( x, ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                             ~token, C1, ~E1, ~SessionNonce, E2
     ),
     Ack( ~sec_ch, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) insecchchanneliCloudldentifierSeedSSEsrpreapp_1_11111112111111111[color=#804640,
                                                                                  process="in(~sec_ch.1:channel,<iCloudldentifier.2, SeedS.2, S2.2, E3.2, s.2, r.2, 'pre_app1'>);"]:
   [
   Let_111111121111111111( <iCloudldentifier.2, SeedS.2, S2.2, E3.2, s.2, 
                            r.2, 'pre_app1'>,
                           ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1, ~sec_ch.1, ~token.1, C1.1, ~E1.2,
                           ~SessionNonce.2, E2.2
   )
   ]
  -->
   [
   State_111111121111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                             ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2, E3.2, S2.2,
                             SeedS.2, iCloudldentifier.2, r.2, s.2
   )
   ]

  /*
  rule (modulo AC) insecchchanneliCloudldentifierSeedSSEsrpreapp_1_11111112111111111[color=#804640,
                                                                                     process="in(~sec_ch.1:channel,<iCloudldentifier.2, SeedS.2, S2.2, E3.2, s.2, r.2, 'pre_app1'>);"]:
     [
     Let_111111121111111111( <iCloudldentifier, SeedS, S2, E3, s, r, 
                              'pre_app1'>,
                             ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch, ~token, C1, ~E1, ~SessionNonce,
                             E2
     )
     ]
    -->
     [
     State_111111121111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch, ~token,
                               C1, ~E1, ~SessionNonce, E2, E3, S2, SeedS, iCloudldentifier, r, s
     )
     ]
  */

rule (modulo E) outgsrESeedSSiCloudldentifieropench_0_111111121111111111[color=#804640,
                                                                         process="out(<'g'^~s_.1, ~r_.1, E3.2, SeedS.2, S2.2, iCloudldentifier.2, 
 'open_ch'>);"]:
   [
   State_111111121111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                             ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2, E3.2, S2.2,
                             SeedS.2, iCloudldentifier.2, r.2, s.2
   )
   ]
  -->
   [
   State_1111111211111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                              ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2, E3.2, S2.2,
                              SeedS.2, iCloudldentifier.2, r.2, s.2
   ),
   Out( <'g'^~s_.1, ~r_.1, E3.2, SeedS.2, S2.2, iCloudldentifier.2, 
         'open_ch'>
   )
   ]

  /*
  rule (modulo AC) outgsrESeedSSiCloudldentifieropench_0_111111121111111111[color=#804640,
                                                                            process="out(<'g'^~s_.1, ~r_.1, E3.2, SeedS.2, S2.2, iCloudldentifier.2, 
 'open_ch'>);"]:
     [
     State_111111121111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch, ~token,
                               C1, ~E1, ~SessionNonce, E2, E3, S2, SeedS, iCloudldentifier, r, s
     )
     ]
    -->
     [
     State_1111111211111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                ~token, C1, ~E1, ~SessionNonce, E2, E3, S2, SeedS, iCloudldentifier, r, s
     ),
     Out( <'g'^~s_, ~r_, E3, SeedS, S2, iCloudldentifier, 'open_ch'> )
     ]
  */

rule (modulo E) eventSendSS_0_1111111211111111111[color=#804640,
                                                  process="event SendS2( S2.2 );"]:
   [
   State_1111111211111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                              ~sec_ch.1, ~token.1, C1.1, ~E1.2, ~SessionNonce.2, E2.2, E3.2, S2.2,
                              SeedS.2, iCloudldentifier.2, r.2, s.2
   ),
   In( <other_param.1, 'open_ch'> )
   ]
  --[ SendS2( S2.2 ) ]->
   [
   State_111111121111111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                                ~sec_ch.1, ~token.1, C1.1, other_param.1, ~E1.2, ~SessionNonce.2, E2.2,
                                E3.2, S2.2, SeedS.2, iCloudldentifier.2, r.2, s.2
   )
   ]

  /*
  rule (modulo AC) eventSendSS_0_1111111211111111111[color=#804640,
                                                     process="event SendS2( S2.2 );"]:
     [
     State_1111111211111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                ~token, C1, ~E1, ~SessionNonce, E2, E3, S2, SeedS, iCloudldentifier, r, s
     ),
     In( <other_param, 'open_ch'> )
     ]
    --[ SendS2( S2 ) ]->
     [
     State_111111121111111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                  ~token, C1, other_param, ~E1, ~SessionNonce, E2, E3, S2, SeedS,
                                  iCloudldentifier, r, s
     )
     ]
  */

rule (modulo E) ifCSHAsr_0_111111121111111111111[color=#804640,
                                                 process="if C1.1=SHA256(<s.2, r.2>)"]:
   [
   State_111111121111111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                                ~sec_ch.1, ~token.1, C1.1, other_param.1, ~E1.2, ~SessionNonce.2, E2.2,
                                E3.2, S2.2, SeedS.2, iCloudldentifier.2, r.2, s.2
   )
   ]
  --[ Pred_Eq( C1.1, SHA256(<s.2, r.2>) ), Secret_d( add(s.2, ~s_.1) ) ]->
   [ ]

  /*
  rule (modulo AC) ifCSHAsr_0_111111121111111111111[color=#804640,
                                                    process="if C1.1=SHA256(<s.2, r.2>)"]:
     [
     State_111111121111111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                  ~token, C1, other_param, ~E1, ~SessionNonce, E2, E3, S2, SeedS,
                                  iCloudldentifier, r, s
     )
     ]
    --[ Pred_Eq( C1, SHA256(<s, r>) ), Secret_d( add(s, ~s_) ) ]->
     [ ]
  */

rule (modulo E) ifCSHAsr_1_111111121111111111111[color=#804640,
                                                 process="if C1.1=SHA256(<s.2, r.2>)"]:
   [
   State_111111121111111111111( ~UUID.1, ~UUID_paired.1, ~r_.1, ~s_.1,
                                ~sec_ch.1, ~token.1, C1.1, other_param.1, ~E1.2, ~SessionNonce.2, E2.2,
                                E3.2, S2.2, SeedS.2, iCloudldentifier.2, r.2, s.2
   )
   ]
  --[ Pred_Not_Eq( C1.1, SHA256(<s.2, r.2>) ) ]->
   [ ]

  /*
  rule (modulo AC) ifCSHAsr_1_111111121111111111111[color=#804640,
                                                    process="if C1.1=SHA256(<s.2, r.2>)"]:
     [
     State_111111121111111111111( ~UUID, ~UUID_paired, ~r_, ~s_, ~sec_ch,
                                  ~token, C1, other_param, ~E1, ~SessionNonce, E2, E3, S2, SeedS,
                                  iCloudldentifier, r, s
     )
     ]
    --[ Pred_Not_Eq( C1, SHA256(<s, r>) ) ]->
     [ ]
  */

rule (modulo E) p_1_11111[color=#ffffff, process="!"]:
   [ !Semistate_111111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ) ]
  -->
   [
   State_11111121( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ),
   State_111111121( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ),
   State_111111111( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 )
   ]

  /*
  rule (modulo AC) p_1_11111[color=#ffffff, process="!"]:
     [ !Semistate_111111( ~UUID, ~UUID_paired, ~sec_ch, ~token ) ]
    -->
     [
     State_11111121( ~UUID, ~UUID_paired, ~sec_ch, ~token ),
     State_111111121( ~UUID, ~UUID_paired, ~sec_ch, ~token ),
     State_111111111( ~UUID, ~UUID_paired, ~sec_ch, ~token )
     ]
  */

rule (modulo E) inSessionNonceEopench_0_11111121[color=#405880,
                                                 process="in(<SessionNonce.3, E1.3, 'open_ch'>);"]:
   [
   State_11111121( ~UUID.1, ~UUID_paired.1, ~sec_ch.1, ~token.1 ),
   In( <SessionNonce.3, E1.3, 'open_ch'> ), Fr( ~s.3 ), Fr( ~r.3 ),
   Fr( ~SeedK1.2 ), Fr( ~exp_2.1 ), Fr( ~SN.2 ), Fr( ~data.2 ),
   Fr( ~Version.2 )
   ]
  --[ SessionNonceEncSource( SessionNonce.3 ), E1EncSource( E1.3 ) ]->
   [
   State_1111112111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1, ~sec_ch.1,
                              ~token.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2, ~r.3, ~s.3, E1.3,
                              SessionNonce.3
   ),
   Out( <SHA256(<~s.3, ~r.3>), 
         ECIES_enc(<SessionNonce.3, ~token.1, ~UUID.1, ~SN.2, ~data.2, 
                    ~Version.2, E1.3, ~SeedK1.2, ~s.3, ~r.3>,
                   pk(qe)), 
         'open_ch'>
   )
   ]

  /*
  rule (modulo AC) inSessionNonceEopench_0_11111121[color=#405880,
                                                    process="in(<SessionNonce.3, E1.3, 'open_ch'>);"]:
     [
     State_11111121( ~UUID, ~UUID_paired, ~sec_ch, ~token ),
     In( <SessionNonce, E1, 'open_ch'> ), Fr( ~s ), Fr( ~r ), Fr( ~SeedK1 ),
     Fr( ~exp_2 ), Fr( ~SN ), Fr( ~data ), Fr( ~Version )
     ]
    --[ SessionNonceEncSource( SessionNonce ), E1EncSource( E1 ) ]->
     [
     State_1111112111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch, ~token,
                                ~SN, ~SeedK1, ~Version, ~data, ~r, ~s, E1, SessionNonce
     ),
     Out( <SHA256(<~s, ~r>), 
           ECIES_enc(<SessionNonce, ~token, ~UUID, ~SN, ~data, ~Version, E1, 
                      ~SeedK1, ~s, ~r>,
                     pk(qe)), 
           'open_ch'>
     )
     ]
  */

rule (modulo E) eventSendEECIESencSessionNoncetokenUUIDSNdataVersionESeedKsrpkqe_0_1111112111111111111[color=#405880,
                                                                                                       process="event SendE2( ECIES_enc(<SessionNonce.3, ~token.1, ~UUID.1, ~SN.2, 
                   ~data.2, ~Version.2, E1.3, ~SeedK1.2, ~s.3, ~r.3>,
                  pk(qe))
);"]:
   [
   State_1111112111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1, ~sec_ch.1,
                              ~token.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2, ~r.3, ~s.3, E1.3,
                              SessionNonce.3
   ),
   In( <pkS.2, r_.2, E3.3, SeedS.3, S2.3, iCloudldentifier.3, 'open_ch'> )
   ]
  --[
  SendE2( ECIES_enc(<SessionNonce.3, ~token.1, ~UUID.1, ~SN.2, ~data.2, 
                     ~Version.2, E1.3, ~SeedK1.2, ~s.3, ~r.3>,
                    pk(qe))
  )
  ]->
   [
   State_111111211111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1,
                                ~sec_ch.1, ~token.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2, pkS.2, r_.2,
                                ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3, SessionNonce.3, iCloudldentifier.3
   )
   ]

  /*
  rule (modulo AC) eventSendEECIESencSessionNoncetokenUUIDSNdataVersionESeedKsrpkqe_0_1111112111111111111[color=#405880,
                                                                                                          process="event SendE2( ECIES_enc(<SessionNonce.3, ~token.1, ~UUID.1, ~SN.2, 
                   ~data.2, ~Version.2, E1.3, ~SeedK1.2, ~s.3, ~r.3>,
                  pk(qe))
);"]:
     [
     State_1111112111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch, ~token,
                                ~SN, ~SeedK1, ~Version, ~data, ~r, ~s, E1, SessionNonce
     ),
     In( <pkS, r_, E3, SeedS, S2, iCloudldentifier, 'open_ch'> )
     ]
    --[
    SendE2( ECIES_enc(<SessionNonce, ~token, ~UUID, ~SN, ~data, ~Version, 
                       E1, ~SeedK1, ~s, ~r>,
                      pk(qe))
    )
    ]->
     [
     State_111111211111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch,
                                  ~token, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r, ~s, E1, E3, S2,
                                  SeedS, SessionNonce, iCloudldentifier
     )
     ]
  */

restriction Restr_ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111_1:
  "∀ x #NOW x.1.
    (Restr_ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111_1( x,
                                                                                  x.1
     ) @ #NOW) ⇒
    (x = x.1)"
  // safety formula

rule (modulo E) ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111[color=#405880,
                                                                                    process="if verify(S2.3, pk(qa)) =
<~UUID.1, SessionNonce.3, SeedS.3, SHA256(<pkS.2, r_.2>), E1.3, 
 E3.3>"]:
   [
   State_111111211111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1,
                                ~sec_ch.1, ~token.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2, pkS.2, r_.2,
                                ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3, SessionNonce.3, iCloudldentifier.3
   )
   ]
  --[
  RecvS2( S2.3,
          <~UUID.1, SessionNonce.3, SeedS.3, SHA256(<pkS.2, r_.2>), E1.3, E3.3>
  ),
  Restr_ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111_1( verify(S2.3,
                                                                                      pk(qa)),
                                                                               <~UUID.1, SessionNonce.3, 
                                                                                SeedS.3, 
                                                                                SHA256(<pkS.2, r_.2>), E1.3, 
                                                                                E3.3>
  )
  ]->
   [
   Let_111111211111111111111111( <E3.3, 
                                  kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                                      PairingSession_const), 
                                  kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                                      PairingSession_const)
                                 >,
                                 ~UUID.1, ~UUID_paired.1, ~exp_2.1, ~sec_ch.1, ~token.1, ~SN.2, ~SeedK1.2,
                                 ~Version.2, ~data.2, pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3,
                                 SessionNonce.3, iCloudldentifier.3
   )
   ]

  /*
  rule (modulo AC) ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111[color=#405880,
                                                                                       process="if verify(S2.3, pk(qa)) =
<~UUID.1, SessionNonce.3, SeedS.3, SHA256(<pkS.2, r_.2>), E1.3, 
 E3.3>"]:
     [
     State_111111211111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch,
                                  ~token, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r, ~s, E1, E3, S2,
                                  SeedS, SessionNonce, iCloudldentifier
     )
     ]
    --[
    RecvS2( S2, <~UUID, SessionNonce, SeedS, SHA256(<pkS, r_>), E1, E3> ),
    Restr_ifverifySpkqaUUIDSessionNonceSeedSSHApkSrEE_0_111111211111111111111_1( z,
                                                                                 <~UUID, SessionNonce, SeedS, 
                                                                                  SHA256(<pkS, r_>), E1, E3>
    )
    ]->
     [
     Let_111111211111111111111111( <E3, 
                                    kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                        PairingSession_const), 
                                    kdf(kdf(<SeedS, ~SeedK1>, ServerSharedSecret_const),
                                        PairingSession_const)
                                   >,
                                   ~UUID, ~UUID_paired, ~exp_2, ~sec_ch, ~token, ~SN, ~SeedK1, ~Version,
                                   ~data, pkS, r_, ~r, ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
     )
     ]
    variants (modulo AC)
    1. S2    = S2.26
       z     = verify(S2.26, pk(qa))
    
    2. S2    = sign(x.24, qa)
       z     = x.24
  */

rule (modulo E) lettknewAESGCMdecEkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconst_1_11111121111111111111111[color=#ffffff,
                                                                                                                                                                                 process="let tk_new.1=AES_GCM_dec(E3.3,
            kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                PairingSession_const),
            kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                PairingSession_const))"]:
   [
   Let_111111211111111111111111( <AES_GCM_enc(tk_new.1, k, v), k, v>,
                                 ~UUID.1, ~UUID_paired.1, ~exp_2.1, ~sec_ch.1, ~token.1, ~SN.2, ~SeedK1.2,
                                 ~Version.2, ~data.2, pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3,
                                 SessionNonce.3, iCloudldentifier.3
   )
   ]
  -->
   [
   State_111111211111111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1,
                                   ~sec_ch.1, ~token.1, tk_new.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2,
                                   pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3, SessionNonce.3,
                                   iCloudldentifier.3
   )
   ]

  /*
  rule (modulo AC) lettknewAESGCMdecEkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconstkdfkdfSeedSSeedKServerSharedSecretconstPairingSessionconst_1_11111121111111111111111[color=#ffffff,
                                                                                                                                                                                    process="let tk_new.1=AES_GCM_dec(E3.3,
            kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                PairingSession_const),
            kdf(kdf(<SeedS.3, ~SeedK1.2>, ServerSharedSecret_const),
                PairingSession_const))"]:
     [
     Let_111111211111111111111111( <AES_GCM_enc(tk_new, k, v), k, v>, ~UUID,
                                   ~UUID_paired, ~exp_2, ~sec_ch, ~token, ~SN, ~SeedK1, ~Version, ~data,
                                   pkS, r_, ~r, ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
     )
     ]
    -->
     [
     State_111111211111111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch,
                                     ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r, ~s, E1, E3,
                                     S2, SeedS, SessionNonce, iCloudldentifier
     )
     ]
  */

rule (modulo E) eventRecvEtknewESeedS_0_111111211111111111111111[color=#405880,
                                                                 process="event RecvE3( tk_new.1, E3.3, SeedS.3 );"]:
   [
   State_111111211111111111111111( ~UUID.1, ~UUID_paired.1, ~exp_2.1,
                                   ~sec_ch.1, ~token.1, tk_new.1, ~SN.2, ~SeedK1.2, ~Version.2, ~data.2,
                                   pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3, SessionNonce.3,
                                   iCloudldentifier.3
   ),
   Fr( ~Status.1 )
   ]
  --[ RecvE3( tk_new.1, E3.3, SeedS.3 ) ]->
   [
   State_111111211111111111111111111( ~Status.1, ~UUID.1, ~UUID_paired.1,
                                      ~exp_2.1, ~sec_ch.1, ~token.1, tk_new.1, ~SN.2, ~SeedK1.2, ~Version.2,
                                      ~data.2, pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3,
                                      SessionNonce.3, iCloudldentifier.3
   ),
   Out( <
         <~Status.1, 
          ECIES_enc(<~UUID.1, ~SN.2, SessionNonce.3, E1.3, tk_new.1, ~Status.1>,
                    pk(qe))
         >, 
         'open_ch'>
   )
   ]

  /*
  rule (modulo AC) eventRecvEtknewESeedS_0_111111211111111111111111[color=#405880,
                                                                    process="event RecvE3( tk_new.1, E3.3, SeedS.3 );"]:
     [
     State_111111211111111111111111( ~UUID, ~UUID_paired, ~exp_2, ~sec_ch,
                                     ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r, ~s, E1, E3,
                                     S2, SeedS, SessionNonce, iCloudldentifier
     ),
     Fr( ~Status )
     ]
    --[ RecvE3( tk_new, E3, SeedS ) ]->
     [
     State_111111211111111111111111111( ~Status, ~UUID, ~UUID_paired, ~exp_2,
                                        ~sec_ch, ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r,
                                        ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
     ),
     Out( <
           <~Status, 
            ECIES_enc(<~UUID, ~SN, SessionNonce, E1, tk_new, ~Status>, pk(qe))>, 
           'open_ch'>
     )
     ]
  */

rule (modulo E) eventSecretSSSkdfSeedSSeedKSerialNumberProtectionconst_0_111111211111111111111111111[color=#405880,
                                                                                                     process="event Secret_SSS( kdf(<SeedS.3, ~SeedK1.2>, SerialNumberProtection_const)
);"]:
   [
   State_111111211111111111111111111( ~Status.1, ~UUID.1, ~UUID_paired.1,
                                      ~exp_2.1, ~sec_ch.1, ~token.1, tk_new.1, ~SN.2, ~SeedK1.2, ~Version.2,
                                      ~data.2, pkS.2, r_.2, ~r.3, ~s.3, E1.3, E3.3, S2.3, SeedS.3,
                                      SessionNonce.3, iCloudldentifier.3
   )
   ]
  --[
  Secret_SSS( kdf(<SeedS.3, ~SeedK1.2>, SerialNumberProtection_const) ),
  Secret_P( add('g'^~s.3, pkS.2) ),
  Secret_SK( kdf(get_point_x(add('g'^~s.3, pkS.2)), <~r.3, r_.2>) )
  ]->
   [ ]

  /*
  rule (modulo AC) eventSecretSSSkdfSeedSSeedKSerialNumberProtectionconst_0_111111211111111111111111111[color=#405880,
                                                                                                        process="event Secret_SSS( kdf(<SeedS.3, ~SeedK1.2>, SerialNumberProtection_const)
);"]:
     [
     State_111111211111111111111111111( ~Status, ~UUID, ~UUID_paired, ~exp_2,
                                        ~sec_ch, ~token, tk_new, ~SN, ~SeedK1, ~Version, ~data, pkS, r_, ~r,
                                        ~s, E1, E3, S2, SeedS, SessionNonce, iCloudldentifier
     )
     ]
    --[
    Secret_SSS( kdf(<SeedS, ~SeedK1>, SerialNumberProtection_const) ),
    Secret_P( add('g'^~s, pkS) ),
    Secret_SK( kdf(get_point_x(add('g'^~s, pkS)), <~r, r_>) )
    ]->
     [ ]
  */

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: /home/xiaofeng/P5_6_7_8_fixed_V6_Apple_simplified_initialization_confidentiality.spthy

  uuid_source (all-traces): analysis incomplete (1 steps)
  S2_verify_sources (all-traces): analysis incomplete (1 steps)
  e2_sources (all-traces): analysis incomplete (1 steps)
  e3_sources (all-traces): analysis incomplete (1 steps)
  h1_source (all-traces): analysis incomplete (1 steps)
  session_source (all-traces): analysis incomplete (1 steps)
  e1_source (all-traces): analysis incomplete (1 steps)
  confidentiality_d (all-traces): verified (25 steps)
  confidentiality_P (all-traces): verified (89 steps)
  confidentiality_SK (all-traces): verified (24 steps)
  confidentiality_SSS (all-traces): verified (18 steps)

==============================================================================
